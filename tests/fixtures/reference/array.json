{
  "topicSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/init()",
        "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-1ip9h",
        "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-236cl",
        "doc://com.apple.Swift/documentation/Swift/Array/init(repeating:count:)",
        "doc://com.apple.Swift/documentation/Swift/Array/init(unsafeUninitializedCapacity:initializingWith:)"
      ],
      "title": "Creating an Array",
      "abstract": [
        {
          "type": "text",
          "text": "In addition to using an array literal, you can also create an array using these initializers."
        }
      ],
      "anchor": "Creating-an-Array"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/isEmpty",
        "doc://com.apple.Swift/documentation/Swift/Array/count",
        "doc://com.apple.Swift/documentation/Swift/Array/capacity"
      ],
      "title": "Inspecting an Array",
      "anchor": "Inspecting-an-Array"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-25iat",
        "doc://com.apple.Swift/documentation/Swift/Array/first",
        "doc://com.apple.Swift/documentation/Swift/Array/last",
        "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-53fvb",
        "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3kwny",
        "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-4h7rl",
        "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3pmfg",
        "doc://com.apple.Swift/documentation/Swift/Array/randomElement()",
        "doc://com.apple.Swift/documentation/Swift/Array/randomElement(using:)"
      ],
      "title": "Accessing Elements",
      "anchor": "Accessing-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/append(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/insert(_:at:)",
        "doc://com.apple.Swift/documentation/Swift/Array/insert(contentsOf:at:)",
        "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)",
        "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)-7293p",
        "doc://com.apple.Swift/documentation/Swift/Array/reserveCapacity(_:)"
      ],
      "title": "Adding Elements",
      "anchor": "Adding-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)",
        "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)-9foli",
        "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-6h58k",
        "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-n33n",
        "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-9fm5l",
        "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)-676ib",
        "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)"
      ],
      "title": "Combining Arrays",
      "anchor": "Combining-Arrays"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/remove(at:)",
        "doc://com.apple.Swift/documentation/Swift/Array/removeFirst()",
        "doc://com.apple.Swift/documentation/Swift/Array/removeFirst(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/removeLast()",
        "doc://com.apple.Swift/documentation/Swift/Array/removeLast(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-8may1",
        "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-9twou",
        "doc://com.apple.Swift/documentation/Swift/Array/removeAll(where:)-5k61r",
        "doc://com.apple.Swift/documentation/Swift/Array/removeAll(keepingCapacity:)",
        "doc://com.apple.Swift/documentation/Swift/Array/popLast()"
      ],
      "title": "Removing Elements",
      "anchor": "Removing-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/contains(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/contains(where:)",
        "doc://com.apple.Swift/documentation/Swift/Array/allSatisfy(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/first(where:)",
        "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(of:)",
        "doc://com.apple.Swift/documentation/Swift/Array/index(of:)",
        "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(where:)",
        "doc://com.apple.Swift/documentation/Swift/Array/last(where:)",
        "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(of:)",
        "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(where:)",
        "doc://com.apple.Swift/documentation/Swift/Array/min()",
        "doc://com.apple.Swift/documentation/Swift/Array/min(by:)",
        "doc://com.apple.Swift/documentation/Swift/Array/max()",
        "doc://com.apple.Swift/documentation/Swift/Array/max(by:)"
      ],
      "title": "Finding Elements",
      "anchor": "Finding-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/prefix(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/prefix(through:)",
        "doc://com.apple.Swift/documentation/Swift/Array/prefix(upTo:)",
        "doc://com.apple.Swift/documentation/Swift/Array/prefix(while:)",
        "doc://com.apple.Swift/documentation/Swift/Array/suffix(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/suffix(from:)"
      ],
      "title": "Selecting Elements",
      "anchor": "Selecting-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/dropFirst(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/dropLast(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/drop(while:)"
      ],
      "title": "Excluding Elements",
      "anchor": "Excluding-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-i3mr",
        "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-6chu8",
        "doc://com.apple.Swift/documentation/Swift/Array/compactMap(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/reduce(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/reduce(into:_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/lazy"
      ],
      "title": "Transforming an Array",
      "anchor": "Transforming-an-Array"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/forEach(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/enumerated()",
        "doc://com.apple.Swift/documentation/Swift/Array/makeIterator()",
        "doc://com.apple.Swift/documentation/Swift/Array/underestimatedCount"
      ],
      "title": "Iterating Over an Array’s Elements",
      "anchor": "Iterating-Over-an-Arrays-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/sort()",
        "doc://com.apple.Swift/documentation/Swift/Array/sort(by:)",
        "doc://com.apple.Swift/documentation/Swift/Array/sorted()",
        "doc://com.apple.Swift/documentation/Swift/Array/sorted(by:)",
        "doc://com.apple.Swift/documentation/Swift/Array/reverse()",
        "doc://com.apple.Swift/documentation/Swift/Array/reversed()",
        "doc://com.apple.Swift/documentation/Swift/Array/shuffle()",
        "doc://com.apple.Swift/documentation/Swift/Array/shuffle(using:)",
        "doc://com.apple.Swift/documentation/Swift/Array/shuffled()",
        "doc://com.apple.Swift/documentation/Swift/Array/shuffled(using:)",
        "doc://com.apple.Swift/documentation/Swift/Array/partition(by:)-90po8",
        "doc://com.apple.Swift/documentation/Swift/Array/swapAt(_:_:)"
      ],
      "title": "Reordering an Array’s Elements",
      "anchor": "Reordering-an-Arrays-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/split(separator:maxSplits:omittingEmptySubsequences:)-3dgmv",
        "doc://com.apple.Swift/documentation/Swift/Array/split(maxSplits:omittingEmptySubsequences:whereSeparator:)",
        "doc://com.apple.Swift/documentation/Swift/Array/joined()",
        "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-7uber",
        "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-5do1g",
        "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-1ckod"
      ],
      "title": "Splitting and Joining Elements",
      "anchor": "Splitting-and-Joining-Elements"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/applying(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/difference(from:)",
        "doc://com.apple.Swift/documentation/Swift/Array/difference(from:by:)"
      ],
      "title": "Creating and Applying Differences",
      "anchor": "Creating-and-Applying-Differences"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/==(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/!=(_:_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:by:)",
        "doc://com.apple.Swift/documentation/Swift/Array/starts(with:)",
        "doc://com.apple.Swift/documentation/Swift/Array/starts(with:by:)",
        "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:by:)"
      ],
      "title": "Comparing Arrays",
      "anchor": "Comparing-Arrays"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/startIndex",
        "doc://com.apple.Swift/documentation/Swift/Array/endIndex",
        "doc://com.apple.Swift/documentation/Swift/Array/index(after:)",
        "doc://com.apple.Swift/documentation/Swift/Array/formIndex(after:)",
        "doc://com.apple.Swift/documentation/Swift/Array/index(before:)",
        "doc://com.apple.Swift/documentation/Swift/Array/formIndex(before:)",
        "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:)",
        "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:)",
        "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:limitedBy:)",
        "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:limitedBy:)",
        "doc://com.apple.Swift/documentation/Swift/Array/distance(from:to:)"
      ],
      "title": "Manipulating Indices",
      "anchor": "Manipulating-Indices"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBufferPointer(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBufferPointer(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBytes(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBytes(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/withContiguousStorageIfAvailable(_:)",
        "doc://com.apple.Swift/documentation/Swift/Array/withContiguousMutableStorageIfAvailable(_:)"
      ],
      "title": "Accessing Underlying Storage",
      "anchor": "Accessing-Underlying-Storage"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/encode(to:)",
        "doc://com.apple.Swift/documentation/Swift/Array/init(from:)"
      ],
      "title": "Encoding and Decoding",
      "anchor": "Encoding-and-Decoding"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/description",
        "doc://com.apple.Swift/documentation/Swift/Array/debugDescription",
        "doc://com.apple.Swift/documentation/Swift/Array/customMirror",
        "doc://com.apple.Swift/documentation/Swift/Array/hash(into:)"
      ],
      "title": "Describing an Array",
      "anchor": "Describing-an-Array"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-2ln1a",
        "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-86ka8"
      ],
      "title": "Converting Between Arrays and Create ML Types",
      "anchor": "Converting-Between-Arrays-and-Create-ML-Types"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
        "doc://com.apple.Swift/documentation/Swift/ArraySlice"
      ],
      "title": "Related Array Types",
      "anchor": "Related-Array-Types"
    },
    {
      "identifiers": [
        "doc://com.apple.documentation/documentation/Foundation/NSArray",
        "doc://com.apple.documentation/documentation/Foundation/NSMutableArray"
      ],
      "title": "Reference Types",
      "abstract": [
        {
          "text": "Use bridged reference types when you need reference semantics or Foundation-specific",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "behavior.",
          "type": "text"
        }
      ],
      "anchor": "Reference-Types"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/Index",
        "doc://com.apple.Swift/documentation/Swift/Array/Indices",
        "doc://com.apple.Swift/documentation/Swift/Array/Iterator",
        "doc://com.apple.Swift/documentation/Swift/Array/ArrayLiteralElement",
        "doc://com.apple.Swift/documentation/Swift/Array/SubSequence"
      ],
      "title": "Supporting Types",
      "anchor": "Supporting-Types"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/init(arrayLiteral:)",
        "doc://com.apple.Swift/documentation/Swift/Array/hashValue"
      ],
      "title": "Infrequently Used Functionality",
      "anchor": "Infrequently-Used-Functionality"
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5eirc",
        "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5kgr3"
      ],
      "title": "Initializers",
      "anchor": "Initializers",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/mutableSpan",
        "doc://com.apple.Swift/documentation/Swift/Array/span"
      ],
      "title": "Instance Properties",
      "anchor": "Instance-Properties",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeTaggedBuffers(_:)"
      ],
      "title": "Instance Methods",
      "anchor": "Instance-Methods",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/Specification",
        "doc://com.apple.Swift/documentation/Swift/Array/UnderlyingSequence",
        "doc://com.apple.Swift/documentation/Swift/Array/UnwrappedType",
        "doc://com.apple.Swift/documentation/Swift/Array/ValueType"
      ],
      "title": "Type Aliases",
      "anchor": "Type-Aliases",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/defaultResolverSpecification"
      ],
      "title": "Type Properties",
      "anchor": "Type-Properties",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/monoscopicForVideoOutput()",
        "doc://com.apple.Swift/documentation/Swift/Array/stereoscopicForVideoOutput()"
      ],
      "title": "Type Methods",
      "anchor": "Type-Methods",
      "generated": true
    },
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Array/BidirectionalCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Collection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/CustomDebugStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/CustomReflectable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/CustomStringConvertible-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Decodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Encodable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Equatable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/ExpressibleByArrayLiteral-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Hashable-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/MutableCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/OperationParameter-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/RandomAccessCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/RangeReplaceableCollection-Implementations",
        "doc://com.apple.Swift/documentation/Swift/Array/Sequence-Implementations"
      ],
      "title": "Default Implementations",
      "anchor": "Default-Implementations",
      "generated": true
    }
  ],
  "abstract": [
    {
      "type": "text",
      "text": "An ordered, random-access collection."
    }
  ],
  "kind": "symbol",
  "primaryContentSections": [
    {
      "declarations": [
        {
          "platforms": ["iOS", "iPadOS", "Mac Catalyst", "macOS", "tvOS", "visionOS", "watchOS"],
          "tokens": [
            {
              "text": "@frozen",
              "kind": "attribute"
            },
            {
              "text": " ",
              "kind": "text"
            },
            {
              "text": "struct",
              "kind": "keyword"
            },
            {
              "text": " ",
              "kind": "text"
            },
            {
              "text": "Array",
              "kind": "identifier"
            },
            {
              "text": "<",
              "kind": "text"
            },
            {
              "text": "Element",
              "kind": "genericParameter"
            },
            {
              "text": ">",
              "kind": "text"
            }
          ],
          "languages": ["swift"]
        }
      ],
      "kind": "declarations"
    },
    {
      "kind": "content",
      "content": [
        {
          "text": "Overview",
          "anchor": "overview",
          "level": 2,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Arrays are one of the most commonly used data types in an app. You use",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "arrays to organize your app’s data. Specifically, you use the ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " type",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to hold elements of a single type, the array’s ",
              "type": "text"
            },
            {
              "code": "Element",
              "type": "codeVoice"
            },
            {
              "text": " type. An array",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "can store any kind of elements—from integers to strings to classes.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "Swift makes it easy to create arrays in your code using an array literal:"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "simply surround a comma-separated list of values with square brackets."
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "Without any other information, Swift creates an array that includes the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "specified values, automatically inferring the array’s "
            },
            {
              "type": "codeVoice",
              "code": "Element"
            },
            {
              "type": "text",
              "text": " type. For"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "// An array of 'Int' elements",
            "let oddNumbers = [1, 3, 5, 7, 9, 11, 13, 15]",
            "",
            "// An array of 'String' elements",
            "let streets = [\"Albemarle\", \"Brandywine\", \"Chesapeake\"]"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "You can create an empty array by specifying the "
            },
            {
              "code": "Element",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " type of your"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "array in the declaration. For example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "// Shortened forms are preferred",
            "var emptyDoubles: [Double] = []",
            "",
            "// The full type name is also allowed",
            "var emptyFloats: Array<Float> = Array()"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "text": "If you need an array that is preinitialized with a fixed number of default",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "values, use the ",
              "type": "text"
            },
            {
              "code": "Array(repeating:count:)",
              "type": "codeVoice"
            },
            {
              "text": " initializer.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "var digitCounts = Array(repeating: 0, count: 10)",
            "print(digitCounts)",
            "// Prints \"[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\""
          ],
          "syntax": "swift"
        },
        {
          "text": "Accessing Array Values",
          "anchor": "Accessing-Array-Values",
          "level": 1,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you need to perform an operation on all of an array’s elements, use a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "for",
              "type": "codeVoice"
            },
            {
              "text": "-",
              "type": "text"
            },
            {
              "code": "in",
              "type": "codeVoice"
            },
            {
              "text": " loop to iterate through the array’s contents.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "for street in streets {",
            "    print(\"I don't live on \\(street).\")",
            "}",
            "// Prints \"I don't live on Albemarle.\"",
            "// Prints \"I don't live on Brandywine.\"",
            "// Prints \"I don't live on Chesapeake.\""
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "Use the "
            },
            {
              "code": "isEmpty",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " property to check quickly whether an array has any"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "elements, or use the "
            },
            {
              "code": "count",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " property to find the number of elements in"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "the array."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "if oddNumbers.isEmpty {",
            "    print(\"I don't know any odd numbers.\")",
            "} else {",
            "    print(\"I know \\(oddNumbers.count) odd numbers.\")",
            "}",
            "// Prints \"I know 8 odd numbers.\""
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "text": "Use the ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "first"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "last"
            },
            {
              "text": " properties for safe access to the value of the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "array’s first and last elements. If the array is empty, these properties",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "nil"
            },
            {
              "text": ".",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "if let firstElement = oddNumbers.first, let lastElement = oddNumbers.last {",
            "    print(firstElement, lastElement, separator: \", \")",
            "}",
            "// Prints \"1, 15\"",
            "",
            "print(emptyDoubles.first, emptyDoubles.last, separator: \", \")",
            "// Prints \"nil, nil\""
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "You can access individual array elements through a subscript. The first"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "element of a nonempty array is always at index zero. You can subscript an"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "array with any integer from zero up to, but not including, the count of"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "the array. Using a negative number or an index equal to or greater than"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "count"
            },
            {
              "type": "text",
              "text": " triggers a runtime error. For example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "print(oddNumbers[0], oddNumbers[3], separator: \", \")",
            "// Prints \"1, 7\"",
            "",
            "print(emptyDoubles[0])",
            "// Triggers runtime error: Index out of range"
          ],
          "syntax": "swift"
        },
        {
          "text": "Adding and Removing Elements",
          "anchor": "Adding-and-Removing-Elements",
          "level": 1,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "Suppose you need to store a list of the names of students that are signed"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "up for a class you’re teaching. During the registration period, you need"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "to add and remove names as students add and drop the class."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": ["var students = [\"Ben\", \"Ivy\", \"Jordell\"]"],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "To add single elements to the end of an array, use the "
            },
            {
              "code": "append(_:)",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " method."
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "Add multiple elements at the same time by passing another array or a"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "sequence of any kind to the "
            },
            {
              "code": "append(contentsOf:)",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " method."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "students.append(\"Maxime\")",
            "students.append(contentsOf: [\"Shakia\", \"William\"])",
            "// [\"Ben\", \"Ivy\", \"Jordell\", \"Maxime\", \"Shakia\", \"William\"]"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "text": "You can add new elements in the middle of an array by using the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "insert(_:at:)"
            },
            {
              "text": " method for single elements and by using",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "insert(contentsOf:at:)"
            },
            {
              "text": " to insert multiple elements from another",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "collection or array literal. The elements at that index and later indices",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "are shifted back to make room.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "students.insert(\"Liam\", at: 3)",
            "// [\"Ben\", \"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "To remove elements from an array, use the "
            },
            {
              "code": "remove(at:)",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": ","
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "code": "removeSubrange(_:)",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": ", and "
            },
            {
              "code": "removeLast()",
              "type": "codeVoice"
            },
            {
              "type": "text",
              "text": " methods."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "// Ben's family is moving to another state",
            "students.remove(at: 0)",
            "// [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\", \"William\"]",
            "",
            "// William is signing up for a different class",
            "students.removeLast()",
            "// [\"Ivy\", \"Jordell\", \"Liam\", \"Maxime\", \"Shakia\"]"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "You can replace an existing element with a new value by assigning the new"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "value to the subscript."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "if let i = students.firstIndex(of: \"Maxime\") {",
            "    students[i] = \"Max\"",
            "}",
            "// [\"Ivy\", \"Jordell\", \"Liam\", \"Max\", \"Shakia\"]"
          ],
          "syntax": "swift"
        },
        {
          "text": "Growing the Size of an Array",
          "anchor": "Growing-the-Size-of-an-Array",
          "level": 2,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "Every array reserves a specific amount of memory to hold its contents. When",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "you add elements to an array and that array begins to exceed its reserved",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "capacity, the array allocates a larger region of memory and copies its",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "elements into the new storage. The new storage is a multiple of the old",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "storage’s size. This exponential growth strategy means that appending an",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "element happens in constant time, averaging the performance of many append",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "operations. Append operations that trigger reallocation have a performance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "cost, but they occur less and less often as the array grows larger.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "If you know approximately how many elements you will need to store, use the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "code": "reserveCapacity(_:)",
              "type": "codeVoice"
            },
            {
              "text": " method before appending to the array to avoid",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "intermediate reallocations. Use the ",
              "type": "text"
            },
            {
              "code": "capacity",
              "type": "codeVoice"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "code": "count",
              "type": "codeVoice"
            },
            {
              "text": " properties to",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "determine how many more elements the array can store without allocating",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "larger storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "For arrays of most "
            },
            {
              "type": "codeVoice",
              "code": "Element"
            },
            {
              "type": "text",
              "text": " types, this storage is a contiguous block of"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "memory. For arrays with an "
            },
            {
              "type": "codeVoice",
              "code": "Element"
            },
            {
              "type": "text",
              "text": " type that is a class or "
            },
            {
              "type": "codeVoice",
              "code": "@objc"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "protocol type, this storage can be a contiguous block of memory or an"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "instance of "
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "type": "text",
              "text": ". Because any arbitrary subclass of "
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "type": "text",
              "text": " can"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "become an "
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "type": "text",
              "text": ", there are no guarantees about representation or"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "efficiency in this case."
            }
          ],
          "type": "paragraph"
        },
        {
          "text": "Modifying Copies of Arrays",
          "anchor": "Modifying-Copies-of-Arrays",
          "level": 1,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "Each array has an independent value that includes the values of all of its"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "elements. For simple types such as integers and other structures, this"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "means that when you change a value in one array, the value of that element"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "does not change in any copies of the array. For example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "var numbers = [1, 2, 3, 4, 5]",
            "var numbersCopy = numbers",
            "numbers[0] = 100",
            "print(numbers)",
            "// Prints \"[100, 2, 3, 4, 5]\"",
            "print(numbersCopy)",
            "// Prints \"[1, 2, 3, 4, 5]\""
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "If the elements in an array are instances of a class, the semantics are the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "same, though they might appear different at first. In this case, the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "values stored in the array are references to objects that live outside the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "array. If you change a reference to an object in one array, only that"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "array has a reference to the new object. However, if two arrays contain"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "references to the same object, you can observe changes to that object’s"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "properties from both arrays. For example:"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "// An integer type with reference semantics",
            "class IntegerReference {",
            "    var value = 10",
            "}",
            "var firstIntegers = [IntegerReference(), IntegerReference()]",
            "var secondIntegers = firstIntegers",
            "",
            "// Modifications to an instance are visible from either array",
            "firstIntegers[0].value = 100",
            "print(secondIntegers[0].value)",
            "// Prints \"100\"",
            "",
            "// Replacements, additions, and removals are still visible",
            "// only in the modified array",
            "firstIntegers[0] = IntegerReference()",
            "print(firstIntegers[0].value)",
            "// Prints \"10\"",
            "print(secondIntegers[0].value)",
            "// Prints \"100\""
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "Arrays, like all variable-size collections in the standard library, use"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "copy-on-write optimization. Multiple copies of an array share the same"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "storage until you modify one of the copies. When that happens, the array"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "being modified replaces its storage with a uniquely owned copy of itself,"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "which is then modified in place. Optimizations are sometimes applied that"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "can reduce the amount of copying."
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "This means that if an array is sharing storage with other copies, the first"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "mutating operation on that array incurs the cost of copying the array. An"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "array that is the sole owner of its storage can perform mutating"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "text",
              "text": "operations in place."
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "In the example below, a ",
              "type": "text"
            },
            {
              "code": "numbers",
              "type": "codeVoice"
            },
            {
              "text": " array is created along with two copies",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "that share the same storage. When the original ",
              "type": "text"
            },
            {
              "code": "numbers",
              "type": "codeVoice"
            },
            {
              "text": " array is",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "modified, it makes a unique copy of its storage before making the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "modification. Further modifications to ",
              "type": "text"
            },
            {
              "code": "numbers",
              "type": "codeVoice"
            },
            {
              "text": " are made in place, while",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "the two copies continue to share the original storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "var numbers = [1, 2, 3, 4, 5]",
            "var firstCopy = numbers",
            "var secondCopy = numbers",
            "",
            "// The storage for 'numbers' is copied here",
            "numbers[0] = 100",
            "numbers[1] = 200",
            "numbers[2] = 300",
            "// 'numbers' is [100, 200, 300, 4, 5]",
            "// 'firstCopy' and 'secondCopy' are [1, 2, 3, 4, 5]"
          ],
          "syntax": "swift"
        },
        {
          "text": "Bridging Between Array and NSArray",
          "anchor": "Bridging-Between-Array-and-NSArray",
          "level": 1,
          "type": "heading"
        },
        {
          "inlineContent": [
            {
              "text": "When you need to access APIs that require data in an ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "text": " instance",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instead of ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "text": ", use the type-cast operator (",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "as"
            },
            {
              "text": ") to bridge your",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance. For bridging to be possible, the ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Element"
            },
            {
              "text": " type of your array",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "must be a class, an ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "@objc"
            },
            {
              "text": " protocol (a protocol imported from Objective-C",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "or marked with the ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "@objc"
            },
            {
              "text": " attribute), or a type that bridges to a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "Foundation type.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "type": "text",
              "text": "The following example shows how you can bridge an "
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "type": "text",
              "text": " instance to"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "type": "text",
              "text": " to use the "
            },
            {
              "type": "codeVoice",
              "code": "write(to:atomically:)"
            },
            {
              "type": "text",
              "text": " method. In this example, the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "colors"
            },
            {
              "type": "text",
              "text": " array can be bridged to "
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "type": "text",
              "text": " because the "
            },
            {
              "type": "codeVoice",
              "code": "colors"
            },
            {
              "type": "text",
              "text": " array’s"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "String"
            },
            {
              "type": "text",
              "text": " elements bridge to "
            },
            {
              "type": "codeVoice",
              "code": "NSString"
            },
            {
              "type": "text",
              "text": ". The compiler prevents bridging the"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "moreColors"
            },
            {
              "type": "text",
              "text": " array, on the other hand, because its "
            },
            {
              "type": "codeVoice",
              "code": "Element"
            },
            {
              "type": "text",
              "text": " type is"
            },
            {
              "type": "text",
              "text": " "
            },
            {
              "type": "codeVoice",
              "code": "Optional<String>"
            },
            {
              "type": "text",
              "text": ", which does "
            },
            {
              "type": "emphasis",
              "inlineContent": [
                {
                  "type": "text",
                  "text": "not"
                }
              ]
            },
            {
              "type": "text",
              "text": " bridge to a Foundation type."
            }
          ],
          "type": "paragraph"
        },
        {
          "type": "codeListing",
          "code": [
            "let colors = [\"periwinkle\", \"rose\", \"moss\"]",
            "let moreColors: [String?] = [\"ochre\", \"pine\"]",
            "",
            "let url = URL(fileURLWithPath: \"names.plist\")",
            "(colors as NSArray).write(to: url, atomically: true)",
            "// true",
            "",
            "(moreColors as NSArray).write(to: url, atomically: true)",
            "// error: cannot convert value of type '[String?]' to type 'NSArray'"
          ],
          "syntax": "swift"
        },
        {
          "inlineContent": [
            {
              "text": "Bridging from ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "text": " takes O(1) time and O(1) space if the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "array’s elements are already instances of a class or an ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "@objc"
            },
            {
              "text": " protocol;",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "otherwise, it takes O(",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ") time and space.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "When the destination array’s element type is a class or an ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "@objc"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "protocol, bridging from ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "text": " first calls the ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "copy(with:)"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "(",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "- copyWithZone:"
            },
            {
              "text": " in Objective-C) method on the array to get an immutable",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "copy and then performs additional Swift bookkeeping work that takes O(1)",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "time. For instances of ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "text": " that are already immutable, ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "copy(with:)"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "usually returns the same array in O(1) time; otherwise, the copying",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "performance is unspecified. If ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "copy(with:)"
            },
            {
              "text": " returns the same array, the",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instances of ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "NSArray"
            },
            {
              "text": " and ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "text": " share storage using the same",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "copy-on-write optimization that is used when two instances of ",
              "type": "text"
            },
            {
              "type": "codeVoice",
              "code": "Array"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "share storage.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "inlineContent": [
            {
              "text": "When the destination array’s element type is a nonclass type that bridges",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "to a Foundation type, bridging from ",
              "type": "text"
            },
            {
              "code": "NSArray",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " performs a",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "bridging copy of the elements to contiguous storage in O(",
              "type": "text"
            },
            {
              "inlineContent": [
                {
                  "text": "n",
                  "type": "text"
                }
              ],
              "type": "emphasis"
            },
            {
              "text": ") time. For",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "example, bridging from ",
              "type": "text"
            },
            {
              "code": "NSArray",
              "type": "codeVoice"
            },
            {
              "text": " to ",
              "type": "text"
            },
            {
              "code": "Array<Int>",
              "type": "codeVoice"
            },
            {
              "text": " performs such a copy. No",
              "type": "text"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "further bridging is required when accessing elements of the ",
              "type": "text"
            },
            {
              "code": "Array",
              "type": "codeVoice"
            },
            {
              "text": " ",
              "type": "text"
            },
            {
              "text": "instance.",
              "type": "text"
            }
          ],
          "type": "paragraph"
        },
        {
          "content": [
            {
              "inlineContent": [
                {
                  "type": "text",
                  "text": "The "
                },
                {
                  "type": "codeVoice",
                  "code": "ContiguousArray"
                },
                {
                  "type": "text",
                  "text": " and "
                },
                {
                  "type": "codeVoice",
                  "code": "ArraySlice"
                },
                {
                  "type": "text",
                  "text": " types are not bridged;"
                },
                {
                  "type": "text",
                  "text": " "
                },
                {
                  "type": "text",
                  "text": "instances of those types always have a contiguous block of memory as"
                },
                {
                  "type": "text",
                  "text": " "
                },
                {
                  "type": "text",
                  "text": "their storage."
                }
              ],
              "type": "paragraph"
            }
          ],
          "type": "aside",
          "name": "Note",
          "style": "note"
        }
      ]
    }
  ],
  "sections": [],
  "hierarchy": {
    "paths": [
      [
        "doc://com.apple.documentation/documentation/technologies",
        "doc://com.apple.Swift/documentation/Swift"
      ]
    ]
  },
  "seeAlsoSections": [
    {
      "identifiers": [
        "doc://com.apple.Swift/documentation/Swift/Int",
        "doc://com.apple.Swift/documentation/Swift/Double",
        "doc://com.apple.Swift/documentation/Swift/String",
        "doc://com.apple.Swift/documentation/Swift/Dictionary",
        "doc://com.apple.Swift/documentation/Swift/swift-standard-library"
      ],
      "title": "Standard Library",
      "anchor": "Standard-Library",
      "generated": true
    }
  ],
  "metadata": {
    "fragments": [
      {
        "text": "struct",
        "kind": "keyword"
      },
      {
        "text": " ",
        "kind": "text"
      },
      {
        "text": "Array",
        "kind": "identifier"
      }
    ],
    "externalID": "s:Sa",
    "navigatorTitle": [
      {
        "text": "Array",
        "kind": "identifier"
      }
    ],
    "title": "Array",
    "platforms": [
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "8.0",
        "deprecated": false,
        "name": "iOS"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "8.0",
        "deprecated": false,
        "name": "iPadOS"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "13.0",
        "deprecated": false,
        "name": "Mac Catalyst"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "10.10",
        "deprecated": false,
        "name": "macOS"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "9.0",
        "deprecated": false,
        "name": "tvOS"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "1.0",
        "deprecated": false,
        "name": "visionOS"
      },
      {
        "unavailable": false,
        "beta": false,
        "introducedAt": "2.0",
        "deprecated": false,
        "name": "watchOS"
      }
    ],
    "role": "symbol",
    "symbolKind": "struct",
    "roleHeading": "Structure",
    "modules": [
      {
        "name": "Swift"
      }
    ]
  },
  "variants": [
    {
      "traits": [
        {
          "interfaceLanguage": "swift"
        }
      ],
      "paths": ["/documentation/swift/array"]
    }
  ],
  "identifier": {
    "url": "doc://com.apple.Swift/documentation/Swift/Array",
    "interfaceLanguage": "swift"
  },
  "schemaVersion": {
    "major": 0,
    "minor": 3,
    "patch": 0
  },
  "relationshipsSections": [
    {
      "identifiers": [
        "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP",
        "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP",
        "doc://com.externally.resolved.symbol/s:12ExtensionKit03AppA5SceneP",
        "doc://com.externally.resolved.symbol/s:7Testing10AttachableP",
        "doc://com.externally.resolved.symbol/s:10Accelerate9BNNSGraphO7BuilderV18OperationParameterP",
        "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection",
        "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP",
        "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE7ContentP",
        "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE28ContentWithFormatDescriptionP",
        "doc://com.apple.Swift/documentation/Swift/CVarArg",
        "doc://com.apple.Swift/documentation/Swift/Collection",
        "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP",
        "doc://com.externally.resolved.symbol/s:16FoundationModels31ConvertibleFromGeneratedContentP",
        "doc://com.externally.resolved.symbol/s:16FoundationModels29ConvertibleToGeneratedContentP",
        "doc://com.apple.Swift/documentation/Swift/Copyable",
        "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
        "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
        "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
        "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP",
        "doc://com.apple.Swift/documentation/Swift/Decodable",
        "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP",
        "doc://com.apple.Swift/documentation/Swift/Encodable",
        "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP",
        "doc://com.apple.Swift/documentation/Swift/Equatable",
        "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
        "doc://com.externally.resolved.symbol/s:16FoundationModels9GenerableP",
        "doc://com.apple.Swift/documentation/Swift/Hashable",
        "doc://com.externally.resolved.symbol/s:16FoundationModels25InstructionsRepresentableP",
        "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP",
        "doc://com.apple.Swift/documentation/Swift/MutableCollection",
        "doc://com.externally.resolved.symbol/s:10Foundation19MutableDataProtocolP",
        "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP",
        "doc://com.externally.resolved.symbol/s:16FoundationModels19PromptRepresentableP",
        "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection",
        "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection",
        "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP",
        "doc://com.externally.resolved.symbol/s:10AppIntents17ResultsCollectionP",
        "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP",
        "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP",
        "doc://com.apple.Swift/documentation/Swift/Sendable",
        "doc://com.apple.Swift/documentation/Swift/SendableMetatype",
        "doc://com.apple.Swift/documentation/Swift/Sequence"
      ],
      "kind": "relationships",
      "title": "Conforms To",
      "type": "conformsTo"
    }
  ],
  "references": {
    "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection": {
      "kind": "symbol",
      "navigatorTitle": [
        {
          "text": "BidirectionalCollection",
          "kind": "identifier"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "BidirectionalCollection",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "title": "BidirectionalCollection",
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "role": "symbol",
      "url": "/documentation/swift/bidirectionalcollection",
      "abstract": [
        {
          "type": "text",
          "text": "A collection that supports backward as well as forward traversal."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/BidirectionalCollection"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/split(maxSplits:omittingEmptySubsequences:whereSeparator:)": {
      "title": "split(maxSplits:omittingEmptySubsequences:whereSeparator:)",
      "url": "/documentation/swift/array/split(maxsplits:omittingemptysubsequences:whereseparator:)",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "split",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "maxSplits",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "omittingEmptySubsequences",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "whereSeparator",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> [",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/split(maxSplits:omittingEmptySubsequences:whereSeparator:)",
      "abstract": [
        {
          "text": "Returns the longest possible subsequences of the collection, in order,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "that don’t contain elements satisfying the given predicate.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Decodable": {
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Decodable"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "abstract": [
        {
          "text": "A type that can decode itself from an external representation.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Decodable",
          "kind": "identifier"
        }
      ],
      "title": "Decodable",
      "url": "/documentation/swift/decodable",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Decodable",
      "navigatorTitle": [
        {
          "text": "Decodable",
          "kind": "identifier"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/hash(into:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/hash(into:)",
      "title": "hash(into:)",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hash"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "into"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "preciseIdentifier": "s:s6HasherV",
          "kind": "typeIdentifier",
          "text": "Hasher"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/hash(into:)",
      "abstract": [
        {
          "type": "text",
          "text": "Hashes the essential components of this value by feeding them into the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given hasher."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Hashable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/max()": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/max()",
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "title": "max()",
      "url": "/documentation/swift/array/max()",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the maximum element in the sequence."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/append(_:)": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "append",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "url": "/documentation/swift/array/append(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/append(_:)",
      "abstract": [
        {
          "text": "Adds a new element at the end of the array.",
          "type": "text"
        }
      ],
      "title": "append(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:by:)": {
      "type": "topic",
      "url": "/documentation/swift/array/lexicographicallyprecedes(_:by:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the sequence precedes another"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence in a lexicographical (dictionary) ordering, using the given"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "predicate to compare elements."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:by:)",
      "title": "lexicographicallyPrecedes(_:by:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "lexicographicallyPrecedes",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Encodable-Implementations": {
      "abstract": [],
      "title": "Encodable Implementations",
      "url": "/documentation/swift/array/encodable-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Encodable-Implementations",
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:16FoundationModels9GenerableP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Generable"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "text": "ConvertibleFromGeneratedContent",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:16FoundationModels31ConvertibleFromGeneratedContentP"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "ConvertibleToGeneratedContent",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:16FoundationModels29ConvertibleToGeneratedContentP"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/FoundationModels/Generable",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:16FoundationModels9GenerableP",
      "abstract": [
        {
          "type": "text",
          "text": "A type that the model uses when responding to prompts."
        }
      ],
      "title": "Generable",
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/Dictionary": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "A collection whose elements are key-value pairs."
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Dictionary"
        }
      ],
      "navigatorTitle": [
        {
          "text": "Dictionary",
          "kind": "identifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Dictionary",
      "kind": "symbol",
      "type": "topic",
      "title": "Dictionary",
      "url": "/documentation/swift/dictionary"
    },
    "doc://com.apple.Swift/documentation/Swift/Array": {
      "type": "topic",
      "title": "Array",
      "kind": "symbol",
      "url": "/documentation/swift/array",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Array"
        }
      ],
      "abstract": [
        {
          "text": "An ordered, random-access collection.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Array"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/BidirectionalCollection-Implementations": {
      "abstract": [],
      "title": "BidirectionalCollection Implementations",
      "url": "/documentation/swift/array/bidirectionalcollection-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/BidirectionalCollection-Implementations",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/swift-standard-library": {
      "abstract": [
        {
          "text": "Solve complex problems and write high-performance, readable code.",
          "type": "text"
        }
      ],
      "kind": "article",
      "title": "Swift Standard Library",
      "url": "/documentation/swift/swift-standard-library",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/swift-standard-library",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeLast(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeLast(_:)",
      "kind": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes the specified number of elements from the end of the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "type": "topic",
      "title": "removeLast(_:)",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "removeLast",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/removelast(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/enumerated()": {
      "type": "topic",
      "url": "/documentation/swift/array/enumerated()",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a sequence of pairs ("
        },
        {
          "type": "emphasis",
          "inlineContent": [
            {
              "text": "n",
              "type": "text"
            }
          ]
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "type": "emphasis",
          "inlineContent": [
            {
              "text": "x",
              "type": "text"
            }
          ]
        },
        {
          "type": "text",
          "text": "), where "
        },
        {
          "type": "emphasis",
          "inlineContent": [
            {
              "text": "n",
              "type": "text"
            }
          ]
        },
        {
          "type": "text",
          "text": " represents a"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "consecutive integer starting at zero and "
        },
        {
          "type": "emphasis",
          "inlineContent": [
            {
              "type": "text",
              "text": "x"
            }
          ]
        },
        {
          "type": "text",
          "text": " represents an element of"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "the sequence."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/enumerated()",
      "title": "enumerated()",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "enumerated",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:s18EnumeratedSequenceV",
          "text": "EnumeratedSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CKRecordValueProtocol"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/CloudKit/CKRecordValueProtocol",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:8CloudKit21CKRecordValueProtocolP",
      "abstract": [
        {
          "type": "text",
          "text": "A description of a CloudKit record value."
        }
      ],
      "title": "CKRecordValueProtocol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-6h58k": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Creates a new collection by concatenating the elements of a sequence and a"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "url": "/documentation/swift/array/+(_:_:)-6h58k",
      "title": "+(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-6h58k",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/CustomDebugStringConvertible-Implementations": {
      "abstract": [],
      "title": "CustomDebugStringConvertible Implementations",
      "url": "/documentation/swift/array/customdebugstringconvertible-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/CustomDebugStringConvertible-Implementations",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(arrayLiteral:)": {
      "url": "/documentation/swift/array/init(arrayliteral:)",
      "role": "symbol",
      "abstract": [
        {
          "text": "Creates an array from the given array literal.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "type": "topic",
      "title": "init(arrayLiteral:)",
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "arrayLiteral"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "...)"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(arrayLiteral:)"
    },
    "doc://com.externally.resolved.symbol/s:16FoundationModels25InstructionsRepresentableP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "InstructionsRepresentable"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/FoundationModels/InstructionsRepresentable",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:16FoundationModels25InstructionsRepresentableP",
      "abstract": [
        {
          "type": "text",
          "text": "Conforming types represent instructions."
        }
      ],
      "title": "InstructionsRepresentable",
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/Array/startIndex": {
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/startIndex",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "startIndex"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "text": "The position of the first element in a nonempty array.",
          "type": "text"
        }
      ],
      "title": "startIndex",
      "kind": "symbol",
      "url": "/documentation/swift/array/startindex"
    },
    "doc://com.externally.resolved.symbol/s:12ExtensionKit03AppA5SceneP": {
      "abstract": [
        {
          "text": "A protocol that defines the user interface for an application extension.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "@",
          "kind": "attribute"
        },
        {
          "text": "MainActor",
          "preciseIdentifier": "s:ScM",
          "kind": "attribute"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "@preconcurrency",
          "kind": "attribute"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "AppExtensionScene",
          "kind": "identifier"
        }
      ],
      "title": "AppExtensionScene",
      "url": "/documentation/ExtensionKit/AppExtensionScene",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:12ExtensionKit03AppA5SceneP",
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "AccelerateMutableBuffer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "preciseIdentifier": "s:10Accelerate0A6BufferP7ElementQa",
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "> : "
        },
        {
          "preciseIdentifier": "s:10Accelerate0A6BufferP",
          "kind": "typeIdentifier",
          "text": "AccelerateBuffer"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate0A13MutableBufferP",
      "url": "/documentation/Accelerate/AccelerateMutableBuffer",
      "kind": "symbol",
      "role": "symbol",
      "title": "AccelerateMutableBuffer",
      "abstract": [
        {
          "type": "text",
          "text": "A type that represents a mutable buffer."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/shuffled()": {
      "abstract": [
        {
          "text": "Returns the elements of the sequence, shuffled.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "shuffled()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/shuffled()",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "shuffled",
          "kind": "identifier"
        },
        {
          "text": "() -> [",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/shuffled()"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3kwny": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3kwny",
      "abstract": [],
      "type": "topic",
      "url": "/documentation/swift/array/subscript(_:)-3kwny",
      "role": "symbol",
      "title": "subscript(_:)",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/min()": {
      "url": "/documentation/swift/array/min()",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/min()",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the minimum element in the sequence."
        }
      ],
      "kind": "symbol",
      "title": "min()",
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/starts(with:)": {
      "type": "topic",
      "url": "/documentation/swift/array/starts(with:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the initial elements of the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence are the same as the elements in another sequence."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/starts(with:)",
      "title": "starts(with:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "starts",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "PossiblePrefix",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "with",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "PossiblePrefix",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withContiguousStorageIfAvailable(_:)": {
      "type": "topic",
      "url": "/documentation/swift/array/withcontiguousstorageifavailable(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Executes a closure on the sequence’s contiguous storage."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withContiguousStorageIfAvailable(_:)",
      "title": "withContiguousStorageIfAvailable(_:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "withContiguousStorageIfAvailable",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "genericParameter"
        },
        {
          "text": ">((",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:SR",
          "text": "UnsafeBufferPointer",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">) ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Equatable-Implementations": {
      "abstract": [],
      "title": "Equatable Implementations",
      "url": "/documentation/swift/array/equatable-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Equatable-Implementations",
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP": {
      "type": "topic",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "PositionScaleRange",
          "kind": "identifier"
        },
        {
          "text": " : ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:6Charts10ScaleRangeP",
          "kind": "typeIdentifier",
          "text": "ScaleRange"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "where"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "VisualValue",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:6Charts10ScaleRangeP11VisualValueQa"
        },
        {
          "text": " == ",
          "kind": "text"
        },
        {
          "text": "CGFloat",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:14CoreFoundation7CGFloatV"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts18PositionScaleRangeP",
      "title": "PositionScaleRange",
      "url": "/documentation/Charts/PositionScaleRange",
      "abstract": [
        {
          "type": "text",
          "text": "A type that configures the x-axis and y-axis values."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(of:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(of:)",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "title": "lastIndex(of:)",
      "url": "/documentation/swift/array/lastindex(of:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the last index where the specified value appears in the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lastIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-9fm5l": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Creates a new collection by concatenating the elements of two collections."
        }
      ],
      "url": "/documentation/swift/array/+(_:_:)-9fm5l",
      "title": "+(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-9fm5l",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/sort(by:)": {
      "url": "/documentation/swift/array/sort(by:)",
      "title": "sort(by:)",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "RandomAccessCollection"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/sort(by:)",
      "abstract": [
        {
          "text": "Sorts the collection in place, using the given predicate as the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "comparison between elements.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "sort",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Bool",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift": {
      "role": "collection",
      "kind": "symbol",
      "images": [
        {
          "identifier": "Swift-PageImage-card.png",
          "type": "card"
        }
      ],
      "url": "/documentation/swift",
      "abstract": [
        {
          "type": "text",
          "text": "Build apps using a powerful open language."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift",
      "title": "Swift"
    },
    "doc://com.apple.documentation/documentation/technologies": {
      "identifier": "doc://com.apple.documentation/documentation/technologies",
      "type": "topic",
      "kind": "technologies",
      "role": "overview",
      "title": "Technologies",
      "abstract": [
        {
          "type": "text",
          "text": ""
        }
      ],
      "url": "/documentation/technologies"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/shuffled(using:)": {
      "url": "/documentation/swift/array/shuffled(using:)",
      "title": "shuffled(using:)",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/shuffled(using:)",
      "abstract": [
        {
          "text": "Returns the elements of the sequence, shuffled using the given generator",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "as a source for randomness.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "shuffled",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "T",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "using",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "T",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> [",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.documentation/documentation/Foundation/NSArray": {
      "abstract": [
        {
          "text": "A static ordered collection of objects.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "class",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "NSArray",
          "kind": "identifier"
        }
      ],
      "title": "NSArray",
      "url": "/documentation/Foundation/NSArray",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.documentation/documentation/Foundation/NSArray",
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "MLDataValueConvertible",
          "kind": "identifier"
        }
      ],
      "kind": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can convert itself to and from a data value."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:8CreateML22MLDataValueConvertibleP",
      "role": "symbol",
      "url": "/documentation/CreateML/MLDataValueConvertible",
      "title": "MLDataValueConvertible"
    },
    "Swift-PageImage-card.png": {
      "variants": [
        {
          "url": "https://docs-assets.developer.apple.com/published/81257762cf893d205c049e3021340e5f/Swift-PageImage-card%402x.png",
          "traits": ["2x", "light"]
        },
        {
          "url": "https://docs-assets.developer.apple.com/published/4d2ed632470b4616483901941fae4098/Swift-PageImage-card~dark%402x.png",
          "traits": ["2x", "dark"]
        }
      ],
      "identifier": "Swift-PageImage-card.png",
      "alt": "An orange Swift logo on a gradient background.",
      "type": "image"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeFirst(_:)": {
      "title": "removeFirst(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Removes the specified number of elements from the beginning of the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "url": "/documentation/swift/array/removefirst(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeFirst(_:)",
      "type": "topic",
      "role": "symbol",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "removeFirst"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/makeIterator()": {
      "conformance": {
        "constraints": [
          {
            "code": "Iterator",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "IndexingIterator<Self>",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "abstract": [
        {
          "text": "Returns an iterator over the elements of the collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "makeIterator",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "text": "IndexingIterator",
          "preciseIdentifier": "s:s16IndexingIteratorV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "title": "makeIterator()",
      "url": "/documentation/swift/array/makeiterator()",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/makeIterator()",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/reversed()": {
      "url": "/documentation/swift/array/reversed()",
      "title": "reversed()",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/reversed()",
      "abstract": [
        {
          "text": "Returns a view presenting the elements of the collection in reverse",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "order.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "reversed",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "text": "ReversedCollection",
          "preciseIdentifier": "s:s18ReversedCollectionV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/capacity": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "capacity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "The total number of elements that the array can contain without"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "allocating new storage."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/capacity",
      "kind": "symbol",
      "title": "capacity",
      "url": "/documentation/swift/array/capacity",
      "role": "symbol"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP": {
      "kind": "symbol",
      "type": "topic",
      "url": "/documentation/Foundation/EncodableWithConfiguration",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "text": "EncodableWithConfiguration",
          "kind": "identifier"
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation26EncodableWithConfigurationP",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol for types that support encoding when supplied with an additional configuration type."
        }
      ],
      "title": "EncodableWithConfiguration"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:)": {
      "type": "topic",
      "url": "/documentation/swift/array/lexicographicallyprecedes(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the sequence precedes another"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence in a lexicographical (dictionary) ordering, using the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "less-than operator ("
        },
        {
          "type": "codeVoice",
          "code": "<"
        },
        {
          "type": "text",
          "text": ") to compare elements."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/lexicographicallyPrecedes(_:)",
      "title": "lexicographicallyPrecedes(_:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "lexicographicallyPrecedes",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Specification": {
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "_IntentValue"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      },
      "abstract": [],
      "fragments": [
        {
          "text": "typealias",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Specification",
          "kind": "identifier"
        }
      ],
      "title": "Array.Specification",
      "url": "/documentation/swift/array/specification",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Specification",
      "navigatorTitle": [
        {
          "text": "Specification",
          "kind": "identifier"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Hashable": {
      "type": "topic",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Hashable"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Hashable",
      "title": "Hashable",
      "url": "/documentation/swift/hashable",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can be hashed into a "
        },
        {
          "type": "codeVoice",
          "code": "Hasher"
        },
        {
          "type": "text",
          "text": " to produce an integer hash value."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Hashable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/MutableCollection-Implementations": {
      "abstract": [],
      "title": "MutableCollection Implementations",
      "url": "/documentation/swift/array/mutablecollection-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/MutableCollection-Implementations",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeLast()": {
      "title": "removeLast()",
      "abstract": [
        {
          "type": "text",
          "text": "Removes and returns the last element of the collection."
        }
      ],
      "conformance": {
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "url": "/documentation/swift/array/removelast()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeLast()",
      "type": "topic",
      "role": "symbol",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "removeLast"
        },
        {
          "kind": "text",
          "text": "() -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/SubSequence": {
      "abstract": [
        {
          "text": "A collection representing a contiguous subrange of this collection’s",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements. The subsequence shares indices with the original collection.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "typealias",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "SubSequence",
          "kind": "identifier"
        }
      ],
      "title": "Array.SubSequence",
      "url": "/documentation/swift/array/subsequence",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/SubSequence",
      "navigatorTitle": [
        {
          "text": "SubSequence",
          "kind": "identifier"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/compactMap(_:)": {
      "abstract": [
        {
          "type": "text",
          "text": "Returns an array containing the non-"
        },
        {
          "type": "codeVoice",
          "code": "nil"
        },
        {
          "type": "text",
          "text": " results of calling the given"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "transformation with each element of this sequence."
        }
      ],
      "role": "symbol",
      "title": "compactMap(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/compactMap(_:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "compactMap",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "ElementOfResult",
          "kind": "genericParameter"
        },
        {
          "text": ">((",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "ElementOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": "?) ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> [",
          "kind": "text"
        },
        {
          "text": "ElementOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/compactmap(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/dropLast(_:)": {
      "abstract": [
        {
          "text": "Returns a subsequence containing all but the specified number of final",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "dropLast",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "Int",
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "kind": "typeIdentifier"
        }
      ],
      "title": "dropLast(_:)",
      "url": "/documentation/swift/array/droplast(_:)",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/dropLast(_:)",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-7uber": {
      "title": "joined(separator:)",
      "url": "/documentation/swift/array/joined(separator:)-7uber",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "Sequence"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "joined",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Separator",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "separator",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Separator",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:s14JoinedSequenceV",
          "text": "JoinedSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-7uber",
      "abstract": [
        {
          "text": "Returns the concatenated elements of this sequence of sequences,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "inserting the given separator between each element.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/monoscopicForVideoOutput()": {
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "CMTag",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "abstract": [
        {
          "text": "Creates a collection of CMTags with the required tags to describe monoscopic video, where there is no stereo view, e.g. kCMTagStereoNone.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "static",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "monoscopicForVideoOutput",
          "kind": "identifier"
        },
        {
          "text": "() -> [",
          "kind": "text"
        },
        {
          "text": "CMTag",
          "preciseIdentifier": "s:9CoreMedia5CMTagC",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "title": "monoscopicForVideoOutput()",
      "url": "/documentation/swift/array/monoscopicforvideooutput()",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/monoscopicForVideoOutput()",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/index(after:)": {
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/index(after:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "index"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "after"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Returns the position immediately after the given index."
        }
      ],
      "title": "index(after:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/index(after:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-236cl": {
      "abstract": [
        {
          "text": "Creates an array containing the elements of a sequence.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "url": "/documentation/swift/array/init(_:)-236cl",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "S",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "S",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-236cl",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/lazy": {
      "abstract": [
        {
          "type": "text",
          "text": "A sequence containing the same elements as this sequence,"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "but on which some operations, such as "
        },
        {
          "type": "codeVoice",
          "code": "map"
        },
        {
          "type": "text",
          "text": " and "
        },
        {
          "type": "codeVoice",
          "code": "filter"
        },
        {
          "text": ", are",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "implemented lazily.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "lazy",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/lazy",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "lazy",
          "kind": "identifier"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "LazySequence",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s12LazySequenceV"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/lazy"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/debugDescription": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/debugDescription",
      "title": "debugDescription",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "debugDescription"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:SS",
          "kind": "typeIdentifier",
          "text": "String"
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/debugdescription",
      "abstract": [
        {
          "type": "text",
          "text": "A textual representation of the array and its elements, suitable for"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "debugging."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeFirst()": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeFirst()",
      "kind": "symbol",
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes and returns the first element of the collection."
        }
      ],
      "type": "topic",
      "title": "removeFirst()",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "removeFirst",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/removefirst()"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/endIndex": {
      "fragments": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "endIndex",
          "kind": "identifier"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        }
      ],
      "url": "/documentation/swift/array/endindex",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/endIndex",
      "title": "endIndex",
      "abstract": [
        {
          "text": "The array’s “past the end” position—that is, the position one greater",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "than the last valid subscript argument.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/formIndex(after:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "after"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "url": "/documentation/swift/array/formindex(after:)",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/formIndex(after:)",
      "title": "formIndex(after:)",
      "abstract": [
        {
          "type": "text",
          "text": "Replaces the given index with its successor."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Iterator": {
      "abstract": [
        {
          "text": "The type that allows iteration over an array’s elements.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "typealias",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Iterator",
          "kind": "identifier"
        }
      ],
      "title": "Array.Iterator",
      "url": "/documentation/swift/array/iterator",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Iterator",
      "navigatorTitle": [
        {
          "text": "Iterator",
          "kind": "identifier"
        }
      ],
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE28ContentWithFormatDescriptionP": {
      "abstract": [
        {
          "text": "This is a marker protocol to indicate content that always has a format description.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ContentWithFormatDescription",
          "kind": "identifier"
        },
        {
          "text": " : ",
          "kind": "text"
        },
        {
          "text": "CMSampleBuffer",
          "preciseIdentifier": "c:@T@CMSampleBufferRef",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Content",
          "preciseIdentifier": "s:So17CMSampleBufferRefa9CoreMediaE7ContentP",
          "kind": "typeIdentifier"
        }
      ],
      "title": "CMSampleBuffer.ContentWithFormatDescription",
      "url": "/documentation/CoreMedia/CMSampleBuffer/ContentWithFormatDescription",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE28ContentWithFormatDescriptionP",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(where:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(where:)",
      "title": "firstIndex(where:)",
      "url": "/documentation/swift/array/firstindex(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the first index in which an element of the collection satisfies"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "the given predicate."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "firstIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Index",
          "preciseIdentifier": "s:Sl5IndexQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/span": {
      "abstract": [],
      "fragments": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "span",
          "kind": "identifier"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Span",
          "preciseIdentifier": "s:s4SpanV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "title": "span",
      "url": "/documentation/swift/array/span",
      "kind": "symbol",
      "role": "symbol",
      "beta": true,
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/span",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Decodable-Implementations": {
      "abstract": [],
      "title": "Decodable Implementations",
      "url": "/documentation/swift/array/decodable-implementations",
      "kind": "article",
      "role": "collectionGroup",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Decodable-Implementations",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "replaceSubrange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "preciseIdentifier": "s:Sn",
          "kind": "typeIdentifier",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier",
          "text": "Int"
        },
        {
          "text": ">, ",
          "kind": "text"
        },
        {
          "text": "with",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/replacesubrange(_:with:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)",
      "abstract": [
        {
          "text": "Replaces a range of elements with the elements in the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "collection.",
          "type": "text"
        }
      ],
      "title": "replaceSubrange(_:with:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/prefix(through:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/prefix(through:)",
      "type": "topic",
      "url": "/documentation/swift/array/prefix(through:)",
      "title": "prefix(through:)",
      "abstract": [
        {
          "text": "Returns a subsequence from the start of the collection through the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "specified position.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "through"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-1ip9h": {
      "abstract": [
        {
          "text": "Creates a new instance of a collection containing the elements of a",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "sequence.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "init(_:)",
      "url": "/documentation/swift/array/init(_:)-1ip9h",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "S",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "S",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-1ip9h",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:)",
      "title": "index(_:offsetBy:)",
      "url": "/documentation/swift/array/index(_:offsetby:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns an index that is the specified distance from the given index."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "index"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Int",
          "preciseIdentifier": "s:Si"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "offsetBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Int",
          "preciseIdentifier": "s:Si"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-i3mr": {
      "abstract": [
        {
          "type": "text",
          "text": "Returns an array containing the concatenated results of calling the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given transformation with each element of this sequence."
        }
      ],
      "role": "symbol",
      "title": "flatMap(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-i3mr",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "flatMap"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "SegmentOfResult",
          "kind": "genericParameter"
        },
        {
          "text": ">((",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "SegmentOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> [",
          "kind": "text"
        },
        {
          "text": "SegmentOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/flatmap(_:)-i3mr"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/swapAt(_:_:)": {
      "abstract": [
        {
          "text": "Exchanges the values at the specified indices of the collection.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "swapAt(_:_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/swapAt(_:_:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "swapAt",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Index",
          "preciseIdentifier": "s:Sl5IndexQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Index",
          "preciseIdentifier": "s:Sl5IndexQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/swapat(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Adds the elements of a sequence to the end of the array."
        }
      ],
      "url": "/documentation/swift/array/append(contentsof:)",
      "title": "append(contentsOf:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "append"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "contentsOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/CVarArg": {
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Escapable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "abstract": [
        {
          "text": "A type whose instances can be encoded, and appropriately passed, as",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements of a C ",
          "type": "text"
        },
        {
          "type": "codeVoice",
          "code": "va_list"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "CVarArg",
          "kind": "identifier"
        }
      ],
      "title": "CVarArg",
      "url": "/documentation/swift/cvararg",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/CVarArg",
      "navigatorTitle": [
        {
          "text": "CVarArg",
          "kind": "identifier"
        }
      ],
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:10AppIntents17ResultsCollectionP": {
      "abstract": [
        {
          "text": "A protocol representing a collection of returned items with support for sectioning.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ResultsCollection",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Result",
          "preciseIdentifier": "s:10AppIntents17ResultsCollectionP6ResultQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "title": "ResultsCollection",
      "url": "/documentation/AppIntents/ResultsCollection",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:10AppIntents17ResultsCollectionP",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Sequence": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sequence",
      "role": "symbol",
      "url": "/documentation/swift/sequence",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sequence"
        }
      ],
      "type": "topic",
      "title": "Sequence",
      "abstract": [
        {
          "type": "text",
          "text": "A type that provides sequential, iterated access to its elements."
        }
      ],
      "kind": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible": {
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "CustomStringConvertible",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "navigatorTitle": [
        {
          "text": "CustomStringConvertible",
          "kind": "identifier"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomStringConvertible",
      "url": "/documentation/swift/customstringconvertible",
      "kind": "symbol",
      "role": "symbol",
      "title": "CustomStringConvertible",
      "abstract": [
        {
          "type": "text",
          "text": "A type with a customized textual representation."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:limitedBy:)": {
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "offsetBy",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "limitedBy",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ],
      "title": "formIndex(_:offsetBy:limitedBy:)",
      "url": "/documentation/swift/array/formindex(_:offsetby:limitedby:)",
      "abstract": [
        {
          "type": "text",
          "text": "Offsets the given index by the specified distance, or so that it equals"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "the given limiting index."
        }
      ],
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:limitedBy:)",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/shuffle()": {
      "abstract": [
        {
          "text": "Shuffles the collection in place.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "shuffle()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/shuffle()",
      "conformance": {
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "RandomAccessCollection",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "shuffle",
          "kind": "identifier"
        },
        {
          "text": "()",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/shuffle()"
    },
    "doc://com.apple.Swift/documentation/Swift/SendableMetatype": {
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/SendableMetatype",
      "type": "topic",
      "title": "SendableMetatype",
      "navigatorTitle": [
        {
          "text": "SendableMetatype",
          "kind": "identifier"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "A type whose metatype can be shared across arbitrary concurrent contexts"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "without introducing a risk of data races. When a generic type "
        },
        {
          "type": "codeVoice",
          "code": "T"
        },
        {
          "text": " conforms",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "to ",
          "type": "text"
        },
        {
          "type": "codeVoice",
          "code": "SendableMetatype"
        },
        {
          "text": ", its metatype ",
          "type": "text"
        },
        {
          "type": "codeVoice",
          "code": "T.Type"
        },
        {
          "type": "text",
          "text": " conforms to "
        },
        {
          "type": "codeVoice",
          "code": "Sendable"
        },
        {
          "type": "text",
          "text": ".  All"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "concrete types implicitly conform to the "
        },
        {
          "type": "codeVoice",
          "code": "SendableMetatype"
        },
        {
          "type": "text",
          "text": " protocol, so its"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "primary purpose is in generic code to prohibit the use of isolated"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "conformances along with the generic type.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": ", "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": ", and "
          },
          {
            "type": "codeVoice",
            "code": "Sendable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "url": "/documentation/swift/sendablemetatype",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "SendableMetatype",
          "kind": "identifier"
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-6chu8": {
      "abstract": [],
      "role": "symbol",
      "title": "flatMap(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/flatMap(_:)-6chu8",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "flatMap"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "ElementOfResult"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "ElementOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": "?) ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> [",
          "kind": "text"
        },
        {
          "text": "ElementOfResult",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/flatmap(_:)-6chu8"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/mutableSpan": {
      "abstract": [],
      "fragments": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "mutableSpan",
          "kind": "identifier"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "MutableSpan",
          "preciseIdentifier": "s:s11MutableSpanV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "title": "mutableSpan",
      "url": "/documentation/swift/array/mutablespan",
      "kind": "symbol",
      "role": "symbol",
      "beta": true,
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/mutableSpan",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5eirc": {
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " is "
          },
          {
            "type": "codeVoice",
            "code": "Float"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "abstract": [
        {
          "text": "Creates a new array of single-precision values from a ",
          "type": "text"
        },
        {
          "type": "codeVoice",
          "code": "DSPSplitComplex"
        },
        {
          "text": " structure.",
          "type": "text"
        }
      ],
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "fromSplitComplex",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "DSPSplitComplex",
          "preciseIdentifier": "c:@S@DSPSplitComplex",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "scale",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Float",
          "preciseIdentifier": "s:Sf",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "count",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Int",
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "title": "init(fromSplitComplex:scale:count:)",
      "url": "/documentation/swift/array/init(fromsplitcomplex:scale:count:)-5eirc",
      "kind": "symbol",
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5eirc",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-53fvb": {
      "abstract": [
        {
          "type": "text",
          "text": "Accesses a contiguous subrange of the array’s elements."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sn",
          "text": "Range"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Int",
          "preciseIdentifier": "s:Si"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "ArraySlice",
          "preciseIdentifier": "s:s10ArraySliceV"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-53fvb",
      "title": "subscript(_:)",
      "url": "/documentation/swift/array/subscript(_:)-53fvb",
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBytes(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBytes(_:)",
      "type": "topic",
      "title": "withUnsafeMutableBytes(_:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeMutableBytes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "preciseIdentifier": "s:Sw",
          "kind": "typeIdentifier",
          "text": "UnsafeMutableRawBufferPointer"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/withunsafemutablebytes(_:)",
      "kind": "symbol",
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the underlying bytes of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "array’s mutable contiguous storage.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/first": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/first",
      "abstract": [
        {
          "type": "text",
          "text": "The first element of the collection."
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/first",
      "role": "symbol",
      "title": "first",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "first"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/min(by:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "min"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/min(by:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/min(by:)",
      "type": "topic",
      "role": "symbol",
      "title": "min(by:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the minimum element in the sequence, using the given predicate as"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "the comparison between elements."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/ExpressibleByArrayLiteral-Implementations": {
      "url": "/documentation/swift/array/expressiblebyarrayliteral-implementations",
      "type": "topic",
      "title": "ExpressibleByArrayLiteral Implementations",
      "role": "collectionGroup",
      "kind": "article",
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/ExpressibleByArrayLiteral-Implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Collection": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Collection",
      "role": "symbol",
      "url": "/documentation/swift/collection",
      "navigatorTitle": [
        {
          "text": "Collection",
          "kind": "identifier"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Collection",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "title": "Collection",
      "abstract": [
        {
          "type": "text",
          "text": "A sequence whose elements can be traversed multiple times,"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "nondestructively, and accessed by an indexed subscript.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "conformance": {
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Copyable",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeTaggedBuffers(_:)": {
      "url": "/documentation/swift/array/withunsafetaggedbuffers(_:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "text": "withUnsafeTaggedBuffers",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "genericParameter"
        },
        {
          "text": ">(([",
          "kind": "text"
        },
        {
          "text": "CMTaggedBuffer",
          "preciseIdentifier": "s:9CoreMedia14CMTaggedBufferV",
          "kind": "typeIdentifier"
        },
        {
          "text": "]) ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "sending ",
          "kind": "keyword"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> sending ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        }
      ],
      "type": "topic",
      "title": "withUnsafeTaggedBuffers(_:)",
      "role": "symbol",
      "kind": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Access the underlying CMTaggedBuffers."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeTaggedBuffers(_:)",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " is "
          },
          {
            "type": "codeVoice",
            "code": "CMTaggedDynamicBuffer"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "formIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "text": "offsetBy",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/formindex(_:offsetby:)",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/formIndex(_:offsetBy:)",
      "title": "formIndex(_:offsetBy:)",
      "abstract": [
        {
          "type": "text",
          "text": "Offsets the given index by the specified distance."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Sequence-Implementations": {
      "abstract": [],
      "role": "collectionGroup",
      "kind": "article",
      "type": "topic",
      "url": "/documentation/swift/array/sequence-implementations",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Sequence-Implementations",
      "title": "Sequence Implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/last(where:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/last(where:)",
      "title": "last(where:)",
      "url": "/documentation/swift/array/last(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the last element of the sequence that satisfies the given"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "predicate."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "last"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Collection-Implementations": {
      "abstract": [],
      "role": "collectionGroup",
      "kind": "article",
      "type": "topic",
      "url": "/documentation/swift/array/collection-implementations",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Collection-Implementations",
      "title": "Collection Implementations"
    },
    "doc://com.externally.resolved.symbol/s:16FoundationModels29ConvertibleToGeneratedContentP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ConvertibleToGeneratedContent"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "preciseIdentifier": "s:16FoundationModels25InstructionsRepresentableP",
          "text": "InstructionsRepresentable",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:16FoundationModels19PromptRepresentableP",
          "text": "PromptRepresentable",
          "kind": "typeIdentifier"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/FoundationModels/ConvertibleToGeneratedContent",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:16FoundationModels29ConvertibleToGeneratedContentP",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can be converted to generated content."
        }
      ],
      "title": "ConvertibleToGeneratedContent",
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/Array/stereoscopicForVideoOutput()": {
      "abstract": [
        {
          "text": "Creates a collection of CMTags with the required tags to describe basic stereoscopic video, where both left and right stereo eyes are present, e.g. kCMTagStereoLeftAndRight.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "type": "topic",
      "url": "/documentation/swift/array/stereoscopicforvideooutput()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/stereoscopicForVideoOutput()",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "CMTag"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "title": "stereoscopicForVideoOutput()",
      "fragments": [
        {
          "text": "static",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "stereoscopicForVideoOutput",
          "kind": "identifier"
        },
        {
          "text": "() -> [",
          "kind": "text"
        },
        {
          "text": "CMTag",
          "preciseIdentifier": "s:9CoreMedia5CMTagC",
          "kind": "typeIdentifier"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/insert(_:at:)": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "insert",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "at"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "url": "/documentation/swift/array/insert(_:at:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/insert(_:at:)",
      "abstract": [
        {
          "text": "Inserts a new element at the specified position.",
          "type": "text"
        }
      ],
      "title": "insert(_:at:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/difference(from:)": {
      "abstract": [
        {
          "text": "Returns the difference needed to produce this collection’s ordered",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements from the given collection.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "type": "topic",
      "url": "/documentation/swift/array/difference(from:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/difference(from:)",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "title": "difference(from:)",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "difference",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "from",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "CollectionDifference",
          "preciseIdentifier": "s:s20CollectionDifferenceV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:16FoundationModels31ConvertibleFromGeneratedContentP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ConvertibleFromGeneratedContent"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "text": "SendableMetatype",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s16SendableMetatypeP"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/FoundationModels/ConvertibleFromGeneratedContent",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:16FoundationModels31ConvertibleFromGeneratedContentP",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can be initialized from generated content."
        }
      ],
      "title": "ConvertibleFromGeneratedContent",
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/Array/description": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/description",
      "title": "description",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "description"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:SS",
          "kind": "typeIdentifier",
          "text": "String"
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/description",
      "abstract": [
        {
          "type": "text",
          "text": "A textual representation of the array and its elements."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-4h7rl": {
      "abstract": [
        {
          "type": "text",
          "text": "Accesses the contiguous subrange of the collection’s elements specified"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "by a range expression."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-4h7rl",
      "title": "subscript(_:)",
      "url": "/documentation/swift/array/subscript(_:)-4h7rl",
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-8may1": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-8may1",
      "kind": "symbol",
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes the elements in the specified subrange from the collection."
        }
      ],
      "type": "topic",
      "title": "removeSubrange(_:)",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "removeSubrange",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sn",
          "text": "Range",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index",
          "kind": "typeIdentifier"
        },
        {
          "text": ">)",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/removesubrange(_:)-8may1"
    },
    "doc://com.apple.Swift/documentation/Swift/Encodable": {
      "abstract": [
        {
          "type": "text",
          "text": "A type that can encode itself to an external representation."
        }
      ],
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "url": "/documentation/swift/encodable",
      "title": "Encodable",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Encodable",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Encodable"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/CustomStringConvertible-Implementations": {
      "abstract": [],
      "url": "/documentation/swift/array/customstringconvertible-implementations",
      "title": "CustomStringConvertible Implementations",
      "kind": "article",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/CustomStringConvertible-Implementations",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/encode(to:)": {
      "abstract": [
        {
          "type": "text",
          "text": "Encodes the elements of this array into the given encoder in an unkeyed"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "container."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "Encodable",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "url": "/documentation/swift/array/encode(to:)",
      "title": "encode(to:)",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/encode(to:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "encode"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "text": ": any ",
          "kind": "text"
        },
        {
          "text": "Encoder",
          "preciseIdentifier": "s:s7EncoderP",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/ArrayLiteralElement": {
      "url": "/documentation/swift/array/arrayliteralelement",
      "role": "symbol",
      "abstract": [
        {
          "text": "The type of the elements of an array literal.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArrayLiteralElement"
        }
      ],
      "type": "topic",
      "title": "Array.ArrayLiteralElement",
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArrayLiteralElement"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/ArrayLiteralElement"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/reserveCapacity(_:)": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "reserveCapacity",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "url": "/documentation/swift/array/reservecapacity(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/reserveCapacity(_:)",
      "abstract": [
        {
          "text": "Reserves enough space to store the specified number of elements.",
          "type": "text"
        }
      ],
      "title": "reserveCapacity(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/last": {
      "abstract": [
        {
          "type": "text",
          "text": "The last element of the collection."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "last"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/last",
      "title": "last",
      "url": "/documentation/swift/array/last",
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/index(before:)": {
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/index(before:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "index"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "before"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "text": "Returns the position immediately before the given index.",
          "type": "text"
        }
      ],
      "title": "index(before:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/index(before:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/split(separator:maxSplits:omittingEmptySubsequences:)-3dgmv": {
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "split"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "separator"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "maxSplits"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "omittingEmptySubsequences"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") -> ["
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "kind": "typeIdentifier",
          "text": "SubSequence"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Returns the longest possible subsequences of the collection, in order,"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "around elements equal to the given element."
        }
      ],
      "url": "/documentation/swift/array/split(separator:maxsplits:omittingemptysubsequences:)-3dgmv",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/split(separator:maxSplits:omittingEmptySubsequences:)-3dgmv",
      "role": "symbol",
      "title": "split(separator:maxSplits:omittingEmptySubsequences:)",
      "type": "topic",
      "kind": "symbol"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP": {
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation12DataProtocolP",
      "role": "symbol",
      "url": "/documentation/Foundation/DataProtocol",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "DataProtocol",
          "kind": "identifier"
        },
        {
          "text": " : ",
          "kind": "text"
        },
        {
          "text": "RandomAccessCollection",
          "preciseIdentifier": "s:Sk",
          "kind": "typeIdentifier"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "where",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": " == ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:s5UInt8V",
          "text": "UInt8",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": " : ",
          "kind": "text"
        },
        {
          "text": "DataProtocol",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Foundation12DataProtocolP"
        }
      ],
      "type": "topic",
      "title": "DataProtocol",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol that provides consistent data access to the bytes underlying contiguous and noncontiguous data buffers."
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(unsafeUninitializedCapacity:initializingWith:)": {
      "abstract": [
        {
          "text": "Creates an array with the specified capacity, then calls the given",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "closure with a buffer covering the array’s uninitialized memory.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "init(unsafeUninitializedCapacity:initializingWith:)",
      "url": "/documentation/swift/array/init(unsafeuninitializedcapacity:initializingwith:)",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "unsafeUninitializedCapacity",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "initializingWith",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "UnsafeMutableBufferPointer",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sr"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">, ",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Void",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s4Voida"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(unsafeUninitializedCapacity:initializingWith:)",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/underestimatedCount": {
      "abstract": [
        {
          "type": "text",
          "text": "A value less than or equal to the number of elements in the collection."
        }
      ],
      "url": "/documentation/swift/array/underestimatedcount",
      "title": "underestimatedCount",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/underestimatedCount",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "underestimatedCount"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Int",
          "preciseIdentifier": "s:Si"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeAll(keepingCapacity:)": {
      "title": "removeAll(keepingCapacity:)",
      "abstract": [
        {
          "type": "text",
          "text": "Removes all elements from the array."
        }
      ],
      "url": "/documentation/swift/array/removeall(keepingcapacity:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeAll(keepingCapacity:)",
      "type": "topic",
      "role": "symbol",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "removeAll"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "keepingCapacity"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/starts(with:by:)": {
      "type": "topic",
      "url": "/documentation/swift/array/starts(with:by:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the initial elements of the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence are equivalent to the elements in another sequence, using"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "the given predicate as the equivalence test."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/starts(with:by:)",
      "title": "starts(with:by:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "starts",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "PossiblePrefix",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "with",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "PossiblePrefix",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "PossiblePrefix",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/!=(_:_:)": {
      "url": "/documentation/swift/array/!=(_:_:)",
      "type": "topic",
      "title": "!=(_:_:)",
      "kind": "symbol",
      "fragments": [
        {
          "text": "static",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "!=",
          "kind": "identifier"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ],
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether two values are not equal."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/!=(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/allSatisfy(_:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/allSatisfy(_:)",
      "title": "allSatisfy(_:)",
      "url": "/documentation/swift/array/allsatisfy(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether every element of a sequence"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "satisfies a given predicate."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "allSatisfy"
        },
        {
          "kind": "text",
          "text": "(("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/difference(from:by:)": {
      "abstract": [
        {
          "type": "text",
          "text": "Returns the difference needed to produce this collection’s ordered"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "elements from the given collection, using the given predicate as an"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "equivalence test."
        }
      ],
      "url": "/documentation/swift/array/difference(from:by:)",
      "title": "difference(from:by:)",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/difference(from:by:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "difference"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "from",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "Bool",
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "CollectionDifference",
          "preciseIdentifier": "s:s20CollectionDifferenceV",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/first(where:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "first"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/first(where:)",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/first(where:)",
      "title": "first(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the first element of the sequence that satisfies the given"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "predicate."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Int": {
      "type": "topic",
      "abstract": [
        {
          "type": "text",
          "text": "A signed integer value type."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Int",
      "kind": "symbol",
      "title": "Int",
      "url": "/documentation/swift/int",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Int"
        }
      ],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Int"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Copyable": {
      "url": "/documentation/swift/copyable",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Copyable"
        }
      ],
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ]
      },
      "role": "symbol",
      "kind": "symbol",
      "title": "Copyable",
      "abstract": [
        {
          "type": "text",
          "text": "A type whose values can be implicitly or explicitly copied."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Copyable"
    },
    "doc://com.apple.Swift/documentation/Swift/Sendable": {
      "abstract": [
        {
          "type": "text",
          "text": "A thread-safe type whose values can be shared across arbitrary concurrent"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "contexts without introducing a risk of data races."
        }
      ],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Sendable"
        }
      ],
      "title": "Sendable",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Sendable",
      "url": "/documentation/swift/sendable",
      "kind": "symbol",
      "role": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": ", "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": ", and "
          },
          {
            "type": "codeVoice",
            "code": "Sendable"
          },
          {
            "type": "text",
            "text": "."
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3pmfg": {
      "role": "symbol",
      "kind": "symbol",
      "type": "topic",
      "abstract": [],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-3pmfg",
      "title": "subscript(_:)",
      "url": "/documentation/swift/array/subscript(_:)-3pmfg",
      "fragments": [
        {
          "text": "subscript",
          "kind": "keyword"
        },
        {
          "text": "((",
          "kind": "text"
        },
        {
          "text": "UnboundedRange_",
          "preciseIdentifier": "s:s15UnboundedRange_O",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ()) -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/index(of:)": {
      "url": "/documentation/swift/array/index(of:)",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/index(of:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the first index where the specified value appears in the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "kind": "symbol",
      "title": "index(of:)",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "index"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Double": {
      "role": "symbol",
      "kind": "symbol",
      "url": "/documentation/swift/double",
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "A double-precision, floating-point value type."
        }
      ],
      "type": "topic",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Double"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Double",
      "title": "Double"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-n33n": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Creates a new collection by concatenating the elements of a collection and"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "a sequence."
        }
      ],
      "url": "/documentation/swift/array/+(_:_:)-n33n",
      "title": "+(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)-n33n",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection": {
      "kind": "symbol",
      "navigatorTitle": [
        {
          "text": "RandomAccessCollection",
          "kind": "identifier"
        }
      ],
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "RandomAccessCollection",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "title": "RandomAccessCollection",
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "role": "symbol",
      "url": "/documentation/swift/randomaccesscollection",
      "abstract": [
        {
          "type": "text",
          "text": "A collection that supports efficient random-access index traversal."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RandomAccessCollection"
    },
    "doc://com.apple.Swift/documentation/Swift/ArraySlice": {
      "type": "topic",
      "abstract": [
        {
          "type": "text",
          "text": "A slice of an "
        },
        {
          "code": "Array",
          "type": "codeVoice"
        },
        {
          "type": "text",
          "text": ", "
        },
        {
          "code": "ContiguousArray",
          "type": "codeVoice"
        },
        {
          "type": "text",
          "text": ", or "
        },
        {
          "code": "ArraySlice",
          "type": "codeVoice"
        },
        {
          "type": "text",
          "text": " instance."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/ArraySlice",
      "kind": "symbol",
      "title": "ArraySlice",
      "url": "/documentation/swift/arrayslice",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ArraySlice"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:)": {
      "type": "topic",
      "url": "/documentation/swift/array/elementsequal(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether this sequence and another"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence contain the same elements in the same order."
        }
      ],
      "conformance": {
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:)",
      "title": "elementsEqual(_:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "elementsEqual",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/randomElement(using:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/randomElement(using:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a random element of the collection, using the given generator as"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "a source for randomness."
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/randomelement(using:)",
      "role": "symbol",
      "title": "randomElement(using:)",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "randomElement"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "using"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "T"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/MutableCollection": {
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "MutableCollection",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "navigatorTitle": [
        {
          "text": "MutableCollection",
          "kind": "identifier"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "identifier": "doc://com.apple.Swift/documentation/Swift/MutableCollection",
      "url": "/documentation/swift/mutablecollection",
      "kind": "symbol",
      "role": "symbol",
      "title": "MutableCollection",
      "abstract": [
        {
          "type": "text",
          "text": "A collection that supports subscript assignment."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Hashable-Implementations": {
      "abstract": [],
      "url": "/documentation/swift/array/hashable-implementations",
      "title": "Hashable Implementations",
      "kind": "article",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Hashable-Implementations",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withContiguousMutableStorageIfAvailable(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withContiguousMutableStorageIfAvailable(_:)",
      "title": "withContiguousMutableStorageIfAvailable(_:)",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withContiguousMutableStorageIfAvailable"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "preciseIdentifier": "s:Sr",
          "kind": "typeIdentifier",
          "text": "UnsafeMutableBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "type": "topic",
      "role": "symbol",
      "abstract": [
        {
          "text": "Executes a closure on the collection’s contiguous storage.",
          "type": "text"
        }
      ],
      "url": "/documentation/swift/array/withcontiguousmutablestorageifavailable(_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5kgr3": {
      "role": "symbol",
      "type": "topic",
      "url": "/documentation/swift/array/init(fromsplitcomplex:scale:count:)-5kgr3",
      "title": "init(fromSplitComplex:scale:count:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(fromSplitComplex:scale:count:)-5kgr3",
      "conformance": {
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "Double",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "fromSplitComplex",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "DSPDoubleSplitComplex",
          "kind": "typeIdentifier",
          "preciseIdentifier": "c:@S@DSPDoubleSplitComplex"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "scale",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Double",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sd"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "count",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "abstract": [
        {
          "text": "Creates a new array of single-precision values from a ",
          "type": "text"
        },
        {
          "type": "codeVoice",
          "code": "DSPDoubleSplitComplex"
        },
        {
          "text": " structure.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBufferPointer(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeMutableBufferPointer(_:)",
      "type": "topic",
      "title": "withUnsafeMutableBufferPointer(_:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeMutableBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "preciseIdentifier": "s:Sr",
          "kind": "typeIdentifier",
          "text": "UnsafeMutableBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">) ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "E",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "E",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/withunsafemutablebufferpointer(_:)",
      "kind": "symbol",
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the array’s mutable contiguous",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "storage.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Indices": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Indices"
        }
      ],
      "type": "topic",
      "abstract": [
        {
          "type": "text",
          "text": "The type that represents the indices that are valid for subscripting an"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "array, in ascending order."
        }
      ],
      "kind": "symbol",
      "url": "/documentation/swift/array/indices",
      "role": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Indices"
        }
      ],
      "title": "Array.Indices",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Indices"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/popLast()": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/popLast()",
      "kind": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes and returns the last element of the collection."
        }
      ],
      "type": "topic",
      "title": "popLast()",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "popLast",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/poplast()"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/CustomReflectable-Implementations": {
      "abstract": [],
      "url": "/documentation/swift/array/customreflectable-implementations",
      "title": "CustomReflectable Implementations",
      "kind": "article",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/CustomReflectable-Implementations",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeAll(where:)-5k61r": {
      "title": "removeAll(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Removes all the elements that satisfy the given predicate."
        }
      ],
      "url": "/documentation/swift/array/removeall(where:)-5k61r",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeAll(where:)-5k61r",
      "type": "topic",
      "role": "symbol",
      "kind": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "removeAll"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/reduce(_:_:)": {
      "abstract": [
        {
          "type": "text",
          "text": "Returns the result of combining the elements of the sequence using the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given closure."
        }
      ],
      "role": "symbol",
      "title": "reduce(_:_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/reduce(_:_:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reduce"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        },
        {
          "text": ", (",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/reduce(_:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/insert(contentsOf:at:)": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "kind": "identifier",
          "text": "insert"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "contentsOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "at"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Index",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/insert(contentsof:at:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/insert(contentsOf:at:)",
      "abstract": [
        {
          "text": "Inserts the elements of a sequence into the collection at the specified",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "position.",
          "type": "text"
        }
      ],
      "title": "insert(contentsOf:at:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBufferPointer(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBufferPointer(_:)",
      "type": "topic",
      "title": "withUnsafeBufferPointer(_:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeBufferPointer"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "kind": "typeIdentifier",
          "text": "UnsafeBufferPointer",
          "preciseIdentifier": "s:SR"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">) "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "E"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "E",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/withunsafebufferpointer(_:)",
      "kind": "symbol",
      "abstract": [
        {
          "text": "Calls a closure with a pointer to the array’s contiguous storage.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/customMirror": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/customMirror",
      "title": "customMirror",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "customMirror"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:s6MirrorV",
          "kind": "typeIdentifier",
          "text": "Mirror"
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/custommirror",
      "abstract": [
        {
          "type": "text",
          "text": "A mirror that reflects the array."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/String": {
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "String"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/String",
      "abstract": [
        {
          "text": "A Unicode string value that is a collection of characters.",
          "type": "text"
        }
      ],
      "url": "/documentation/swift/string",
      "kind": "symbol",
      "type": "topic",
      "title": "String",
      "role": "symbol",
      "fragments": [
        {
          "text": "struct",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "kind": "identifier",
          "text": "String"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(from:)": {
      "abstract": [
        {
          "text": "Creates a new array by decoding from the given decoder.",
          "type": "text"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Decodable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "url": "/documentation/swift/array/init(from:)",
      "title": "init(from:)",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(from:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "from",
          "kind": "externalParam"
        },
        {
          "text": ": any ",
          "kind": "text"
        },
        {
          "text": "Decoder",
          "preciseIdentifier": "s:s7DecoderP",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-9twou": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/removeSubrange(_:)-9twou",
      "kind": "symbol",
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes the elements in the specified subrange from the collection."
        }
      ],
      "type": "topic",
      "title": "removeSubrange(_:)",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "removeSubrange",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/removesubrange(_:)-9twou"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/suffix(_:)": {
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/suffix(_:)",
      "title": "suffix(_:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "suffix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a subsequence, up to the given maximum length, containing the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "final elements of the collection."
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/suffix(_:)"
    },
    "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP": {
      "abstract": [
        {
          "text": "An interface for describing a collection of related models.",
          "type": "text"
        }
      ],
      "url": "/documentation/SwiftData/RelationshipCollection",
      "title": "RelationshipCollection",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:9SwiftData22RelationshipCollectionP",
      "role": "symbol",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "RelationshipCollection",
          "kind": "identifier"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:10Foundation19MutableDataProtocolP": {
      "abstract": [
        {
          "text": "A protocol that provides consistent data access to the bytes underlying contiguous and noncontiguous mutable data buffers.",
          "type": "text"
        }
      ],
      "url": "/documentation/Foundation/MutableDataProtocol",
      "title": "MutableDataProtocol",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation19MutableDataProtocolP",
      "role": "symbol",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "MutableDataProtocol",
          "kind": "identifier"
        },
        {
          "text": " : ",
          "kind": "text"
        },
        {
          "text": "DataProtocol",
          "preciseIdentifier": "s:10Foundation12DataProtocolP",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "MutableCollection",
          "preciseIdentifier": "s:SM",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "RangeReplaceableCollection",
          "preciseIdentifier": "s:Sm",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/dropFirst(_:)": {
      "abstract": [
        {
          "text": "Returns a subsequence containing all but the given number of initial",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "elements.",
          "type": "text"
        }
      ],
      "url": "/documentation/swift/array/dropfirst(_:)",
      "title": "dropFirst(_:)",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/dropFirst(_:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "dropFirst",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "Int",
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP": {
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ScaleDomain",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts11ScaleDomainP",
      "url": "/documentation/Charts/ScaleDomain",
      "kind": "symbol",
      "role": "symbol",
      "title": "ScaleDomain",
      "abstract": [
        {
          "type": "text",
          "text": "A type that you can use to configure the domain of a chart."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-1ckod": {
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "StringProtocol",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "joined"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "separator"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:SS",
          "kind": "typeIdentifier",
          "text": "String"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "preciseIdentifier": "s:SS",
          "kind": "typeIdentifier",
          "text": "String"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Returns a new string by concatenating the elements of the sequence,"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "adding the given separator between each element."
        }
      ],
      "url": "/documentation/swift/array/joined(separator:)-1ckod",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-1ckod",
      "role": "symbol",
      "title": "joined(separator:)",
      "type": "topic",
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/suffix(from:)": {
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/suffix(from:)",
      "title": "suffix(from:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "suffix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a subsequence from the specified position to the end of the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/suffix(from:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/prefix(while:)": {
      "title": "prefix(while:)",
      "role": "symbol",
      "url": "/documentation/swift/array/prefix(while:)",
      "abstract": [
        {
          "text": "Returns a subsequence containing the initial elements until ",
          "type": "text"
        },
        {
          "code": "predicate",
          "type": "codeVoice"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "returns ",
          "type": "text"
        },
        {
          "code": "false",
          "type": "codeVoice"
        },
        {
          "text": " and skipping the remaining elements.",
          "type": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/prefix(while:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "while"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "kind": "typeIdentifier",
          "text": "SubSequence"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/contains(_:)": {
      "url": "/documentation/swift/array/contains(_:)",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/contains(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the sequence contains the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given element."
        }
      ],
      "kind": "symbol",
      "title": "contains(_:)",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)": {
      "role": "symbol",
      "abstract": [],
      "url": "/documentation/swift/array/+=(_:_:)",
      "title": "+=(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "preciseIdentifier": "s:Sa",
          "kind": "typeIdentifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "preciseIdentifier": "s:Sa",
          "kind": "typeIdentifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:7Testing10AttachableP": {
      "type": "topic",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Attachable",
          "kind": "identifier"
        },
        {
          "text": " : ~Copyable",
          "kind": "text"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:7Testing10AttachableP",
      "title": "Attachable",
      "url": "/documentation/Testing/Attachable",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol describing a type that can be attached to a test report or written to disk when a test is run."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/OperationParameter-Implementations": {
      "abstract": [],
      "url": "/documentation/swift/array/operationparameter-implementations",
      "title": "OperationParameter Implementations",
      "kind": "article",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/OperationParameter-Implementations",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)": {
      "role": "symbol",
      "abstract": [],
      "url": "/documentation/swift/array/+(_:_:)",
      "title": "+(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+(_:_:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "text": "Array",
          "preciseIdentifier": "s:Sa"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">, "
        },
        {
          "preciseIdentifier": "s:Sa",
          "kind": "typeIdentifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">) -> "
        },
        {
          "preciseIdentifier": "s:Sa",
          "kind": "typeIdentifier",
          "text": "Array"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "type": "topic"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP": {
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate0A6BufferP",
      "role": "symbol",
      "url": "/documentation/Accelerate/AccelerateBuffer",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "AccelerateBuffer",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:10Accelerate0A6BufferP7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "type": "topic",
      "title": "AccelerateBuffer",
      "abstract": [
        {
          "type": "text",
          "text": "A type that represents an immutable buffer."
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/reduce(into:_:)": {
      "abstract": [
        {
          "type": "text",
          "text": "Returns the result of combining the elements of the sequence using the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given closure."
        }
      ],
      "role": "symbol",
      "title": "reduce(into:_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/reduce(into:_:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "reduce"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "into",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        },
        {
          "text": ", (",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Result",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ()) ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Result"
        }
      ],
      "url": "/documentation/swift/array/reduce(into:_:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/max(by:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "max"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "by"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/max(by:)",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/max(by:)",
      "title": "max(by:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the maximum element in the sequence, using the given predicate"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "as the comparison between elements."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/prefix(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/prefix(_:)",
      "type": "topic",
      "url": "/documentation/swift/array/prefix(_:)",
      "title": "prefix(_:)",
      "abstract": [
        {
          "text": "Returns a subsequence, up to the specified maximum length, containing",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the initial elements of the collection.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible": {
      "abstract": [
        {
          "type": "text",
          "text": "A type with a customized textual representation suitable for debugging"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "purposes."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomDebugStringConvertible",
      "url": "/documentation/swift/customdebugstringconvertible",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "title": "CustomDebugStringConvertible",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "CustomDebugStringConvertible"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/joined()": {
      "title": "joined()",
      "url": "/documentation/swift/array/joined()",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "Sequence",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "joined",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:s15FlattenSequenceV",
          "text": "FlattenSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ">",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/joined()",
      "abstract": [
        {
          "text": "Returns the elements of this sequence of sequences, concatenated.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBytes(_:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/withUnsafeBytes(_:)",
      "type": "topic",
      "title": "withUnsafeBytes(_:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "withUnsafeBytes"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">(("
        },
        {
          "preciseIdentifier": "s:SW",
          "kind": "typeIdentifier",
          "text": "UnsafeRawBufferPointer"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "R",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/withunsafebytes(_:)",
      "kind": "symbol",
      "abstract": [
        {
          "text": "Calls the given closure with a pointer to the underlying bytes of the",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "array’s contiguous storage.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/RangeReplaceableCollection-Implementations": {
      "abstract": [],
      "url": "/documentation/swift/array/rangereplaceablecollection-implementations",
      "title": "RangeReplaceableCollection Implementations",
      "kind": "article",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/RangeReplaceableCollection-Implementations",
      "role": "collectionGroup"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/contains(where:)": {
      "url": "/documentation/swift/array/contains(where:)",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/contains(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether the sequence contains an"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "element that satisfies the given predicate."
        }
      ],
      "kind": "symbol",
      "title": "contains(where:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "contains"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral": {
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ExpressibleByArrayLiteral",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "navigatorTitle": [
        {
          "text": "ExpressibleByArrayLiteral",
          "kind": "identifier"
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "identifier": "doc://com.apple.Swift/documentation/Swift/ExpressibleByArrayLiteral",
      "url": "/documentation/swift/expressiblebyarrayliteral",
      "kind": "symbol",
      "role": "symbol",
      "title": "ExpressibleByArrayLiteral",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can be initialized using an array literal."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/Index": {
      "fragments": [
        {
          "text": "typealias",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Index",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "abstract": [
        {
          "text": "The index type for arrays, ",
          "type": "text"
        },
        {
          "code": "Int",
          "type": "codeVoice"
        },
        {
          "text": ".",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/swift/array/index",
      "role": "symbol",
      "navigatorTitle": [
        {
          "text": "Index",
          "kind": "identifier"
        }
      ],
      "title": "Array.Index",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/Index"
    },
    "doc://com.apple.documentation/documentation/Foundation/NSMutableArray": {
      "abstract": [
        {
          "text": "A dynamic ordered collection of objects.",
          "type": "text"
        }
      ],
      "url": "/documentation/Foundation/NSMutableArray",
      "title": "NSMutableArray",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.documentation/documentation/Foundation/NSMutableArray",
      "role": "symbol",
      "fragments": [
        {
          "text": "class",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "NSMutableArray",
          "kind": "identifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/drop(while:)": {
      "abstract": [
        {
          "text": "Returns a subsequence by skipping elements while ",
          "type": "text"
        },
        {
          "code": "predicate",
          "type": "codeVoice"
        },
        {
          "text": " returns",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "code": "true",
          "type": "codeVoice"
        },
        {
          "text": " and returning the remaining elements.",
          "type": "text"
        }
      ],
      "url": "/documentation/swift/array/drop(while:)",
      "title": "drop(while:)",
      "kind": "symbol",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/drop(while:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "drop",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "while",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Bool",
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "SubSequence",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/hashValue": {
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Hashable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "hashValue"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "The hash value."
        }
      ],
      "type": "topic",
      "title": "hashValue",
      "kind": "symbol",
      "url": "/documentation/swift/array/hashvalue",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/hashValue"
    },
    "doc://com.externally.resolved.symbol/s:10Accelerate9BNNSGraphO7BuilderV18OperationParameterP": {
      "identifier": "doc://com.externally.resolved.symbol/s:10Accelerate9BNNSGraphO7BuilderV18OperationParameterP",
      "role": "symbol",
      "url": "/documentation/Accelerate/BNNSGraph/Builder/OperationParameter",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "OperationParameter"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10Accelerate9BNNSGraphO7BuilderV18OperationParameterP7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">"
        }
      ],
      "type": "topic",
      "title": "BNNSGraph.Builder.OperationParameter",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol that allows functions to accept either tensors or collections."
        }
      ],
      "kind": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-2ln1a": {
      "conformance": {
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "MLDataValueConvertible",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML12MLDataColumnV",
          "text": "MLDataColumn"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ">)"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Constructs an Array with the elements of a DataColumn."
        }
      ],
      "type": "topic",
      "title": "init(_:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/init(_:)-2ln1a",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-2ln1a"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/partition(by:)-90po8": {
      "abstract": [
        {
          "text": "Reorders the elements of the collection such that all the elements",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "that match the given predicate are after all the elements that don’t",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "match.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "partition(by:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/partition(by:)-90po8",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "partition",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "text": "Index",
          "preciseIdentifier": "s:Sl5IndexQa",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/partition(by:)-90po8"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/isEmpty": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "isEmpty"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "A Boolean value indicating whether the collection is empty."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/isEmpty",
      "kind": "symbol",
      "title": "isEmpty",
      "url": "/documentation/swift/array/isempty",
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/remove(at:)": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/remove(at:)",
      "kind": "symbol",
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Removes and returns the element at the specified position."
        }
      ],
      "type": "topic",
      "title": "remove(at:)",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "remove",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "at",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        }
      ],
      "url": "/documentation/swift/array/remove(at:)"
    },
    "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE7ContentP": {
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Content"
        },
        {
          "kind": "text",
          "text": " : "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s8SendableP",
          "text": "Sendable"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "All buffer types that can be carried by sample buffer are marked by this protocol."
        }
      ],
      "type": "topic",
      "title": "CMSampleBuffer.Content",
      "kind": "symbol",
      "url": "/documentation/CoreMedia/CMSampleBuffer/Content",
      "identifier": "doc://com.externally.resolved.symbol/s:So17CMSampleBufferRefa9CoreMediaE7ContentP"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/sort()": {
      "abstract": [
        {
          "text": "Sorts the collection in place.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "sort()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/sort()",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "RandomAccessCollection",
            "type": "codeVoice"
          },
          {
            "text": " and ",
            "type": "text"
          },
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "sort",
          "kind": "identifier"
        },
        {
          "text": "()",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/sort()"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/prefix(upTo:)": {
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/prefix(upTo:)",
      "title": "prefix(upTo:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "prefix"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "upTo"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl11SubSequenceQa",
          "text": "SubSequence"
        }
      ],
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a subsequence from the start of the collection up to, but not"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "including, the specified position."
        }
      ],
      "type": "topic",
      "url": "/documentation/swift/array/prefix(upto:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)-9foli": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Adds the elements of a sequence or collection to the end of this"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "url": "/documentation/swift/array/append(contentsof:)-9foli",
      "title": "append(contentsOf:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/append(contentsOf:)-9foli",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "append"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "externalParam",
          "text": "contentsOf"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "S"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/CustomReflectable": {
      "abstract": [
        {
          "type": "text",
          "text": "A type that explicitly supplies its own mirror."
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "CustomReflectable",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/CustomReflectable",
      "url": "/documentation/swift/customreflectable",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "title": "CustomReflectable",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "text": "CustomReflectable",
          "kind": "identifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/applying(_:)": {
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "applying"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:s20CollectionDifferenceV",
          "text": "CollectionDifference"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier"
        },
        {
          "text": ">) -> ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Applies the given difference to this collection."
        }
      ],
      "type": "topic",
      "title": "applying(_:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/applying(_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/applying(_:)"
    },
    "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP": {
      "kind": "symbol",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ContiguousBytes",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "title": "ContiguousBytes",
      "role": "symbol",
      "url": "/documentation/Foundation/ContiguousBytes",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol that declares the type offers direct access to the underlying raw bytes in a contiguous manner."
        }
      ],
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation15ContiguousBytesP"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-25iat": {
      "type": "topic",
      "title": "subscript(_:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/subscript(_:)-25iat",
      "abstract": [
        {
          "type": "text",
          "text": "Accesses the element at the specified position."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/subscript(_:)-25iat",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "subscript"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "preciseIdentifier": "s:Si",
          "kind": "typeIdentifier",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Element"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(of:)": {
      "url": "/documentation/swift/array/firstindex(of:)",
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/firstIndex(of:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the first index where the specified value appears in the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "collection."
        }
      ],
      "kind": "symbol",
      "title": "firstIndex(of:)",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ]
      },
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "firstIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "of"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sl5IndexQa",
          "text": "Index"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ],
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/distance(from:to:)": {
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/distance(from:to:)",
      "title": "distance(from:to:)",
      "url": "/documentation/swift/array/distance(from:to:)",
      "abstract": [
        {
          "text": "Returns the distance between two indices.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "distance"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "from"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "to"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/sorted(by:)": {
      "abstract": [
        {
          "text": "Returns the elements of the sequence, sorted using the given predicate as",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "the comparison between elements.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "sorted(by:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/sorted(by:)",
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "sorted",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "text": "Bool",
          "preciseIdentifier": "s:Sb",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> [",
          "kind": "text"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "kind": "typeIdentifier",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": "]"
        }
      ],
      "url": "/documentation/swift/array/sorted(by:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(repeating:count:)": {
      "abstract": [
        {
          "text": "Creates a new array containing the specified number of a single, repeated",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "value.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "init(repeating:count:)",
      "url": "/documentation/swift/array/init(repeating:count:)",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "repeating",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "count",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(repeating:count:)",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/forEach(_:)": {
      "type": "topic",
      "url": "/documentation/swift/array/foreach(_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Calls the given closure on each element in the sequence in the same order"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "as a "
        },
        {
          "type": "codeVoice",
          "code": "for"
        },
        {
          "type": "text",
          "text": "-"
        },
        {
          "type": "codeVoice",
          "code": "in"
        },
        {
          "type": "text",
          "text": " loop."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/forEach(_:)",
      "title": "forEach(_:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "forEach",
          "kind": "identifier"
        },
        {
          "text": "((",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:s4Voida",
          "text": "Void",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)-7293p": {
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "kind": "identifier",
          "text": "replaceSubrange"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "C"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "genericParameter",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "typeIdentifier",
          "text": "R"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "with"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "C",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/replacesubrange(_:with:)-7293p",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/replaceSubrange(_:with:)-7293p",
      "abstract": [
        {
          "text": "Replaces the specified subrange of elements with the given collection.",
          "type": "text"
        }
      ],
      "title": "replaceSubrange(_:with:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:limitedBy:)": {
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/index(_:offsetBy:limitedBy:)",
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "index"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "externalParam",
          "text": "offsetBy"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "limitedBy",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Si",
          "text": "Int",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Returns an index that is the specified distance from the given index,"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "unless that distance is beyond a given limiting index."
        }
      ],
      "title": "index(_:offsetBy:limitedBy:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/index(_:offsetby:limitedby:)"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(where:)": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "lastIndex"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "externalParam",
          "text": "where"
        },
        {
          "kind": "text",
          "text": ": ("
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "throws"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sb",
          "text": "Bool"
        },
        {
          "kind": "text",
          "text": ") "
        },
        {
          "kind": "keyword",
          "text": "rethrows"
        },
        {
          "kind": "text",
          "text": " -> "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "text": "Index",
          "preciseIdentifier": "s:Sl5IndexQa",
          "kind": "typeIdentifier"
        },
        {
          "text": "?",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/lastindex(where:)",
      "role": "symbol",
      "type": "topic",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/lastIndex(where:)",
      "title": "lastIndex(where:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns the index of the last element in the collection that matches the"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "given predicate."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/UnwrappedType": {
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "abstract": [],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnwrappedType"
        }
      ],
      "type": "topic",
      "title": "Array.UnwrappedType",
      "kind": "symbol",
      "url": "/documentation/swift/array/unwrappedtype",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/UnwrappedType"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/sorted()": {
      "abstract": [
        {
          "text": "Returns the elements of the sequence, sorted.",
          "type": "text"
        }
      ],
      "role": "symbol",
      "title": "sorted()",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/sorted()",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Comparable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "kind": "symbol",
      "type": "topic",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "sorted",
          "kind": "identifier"
        },
        {
          "text": "() -> [",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "text": "]",
          "kind": "text"
        }
      ],
      "url": "/documentation/swift/array/sorted()"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/formIndex(before:)": {
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "formIndex",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "before",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "Int",
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "title": "formIndex(before:)",
      "url": "/documentation/swift/array/formindex(before:)",
      "abstract": [
        {
          "type": "text",
          "text": "Replaces the given index with its predecessor."
        }
      ],
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/formIndex(before:)",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Equatable": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "type": "topic",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "Equatable"
        }
      ],
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Equatable"
          },
          {
            "type": "text",
            "text": "."
          }
        ]
      },
      "identifier": "doc://com.apple.Swift/documentation/Swift/Equatable",
      "url": "/documentation/swift/equatable",
      "kind": "symbol",
      "role": "symbol",
      "title": "Equatable",
      "abstract": [
        {
          "type": "text",
          "text": "A type that can be compared for value equality."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)-676ib": {
      "role": "symbol",
      "abstract": [
        {
          "type": "text",
          "text": "Appends the elements of a sequence to a range-replaceable collection."
        }
      ],
      "url": "/documentation/swift/array/+=(_:_:)-676ib",
      "title": "+=(_:_:)",
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/+=(_:_:)-676ib",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "+="
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "genericParameter",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ">("
        },
        {
          "kind": "keyword",
          "text": "inout"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": ", "
        },
        {
          "kind": "typeIdentifier",
          "text": "Other"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/defaultResolverSpecification": {
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "defaultResolverSpecification"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:10AppIntents26EmptyResolverSpecificationV",
          "text": "EmptyResolverSpecification"
        },
        {
          "kind": "text",
          "text": "<"
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Sa",
          "text": "Array"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">>",
          "kind": "text"
        }
      ],
      "abstract": [],
      "type": "topic",
      "title": "defaultResolverSpecification",
      "kind": "symbol",
      "url": "/documentation/swift/array/defaultresolverspecification",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/defaultResolverSpecification"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/ValueType": {
      "abstract": [],
      "type": "topic",
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/ValueType",
      "kind": "symbol",
      "title": "Array.ValueType",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "ValueType"
        }
      ],
      "conformance": {
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "url": "/documentation/swift/array/valuetype",
      "role": "symbol"
    },
    "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP": {
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ScaleRange",
          "kind": "identifier"
        }
      ],
      "type": "topic",
      "identifier": "doc://com.externally.resolved.symbol/s:6Charts10ScaleRangeP",
      "url": "/documentation/Charts/ScaleRange",
      "kind": "symbol",
      "role": "symbol",
      "title": "ScaleRange",
      "abstract": [
        {
          "type": "text",
          "text": "A type that you can use to configure the range of a chart."
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-5do1g": {
      "title": "joined(separator:)",
      "url": "/documentation/swift/array/joined(separator:)-5do1g",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " is "
          },
          {
            "type": "codeVoice",
            "code": "String"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "joined",
          "kind": "identifier"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "text": "separator",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:SS",
          "text": "String",
          "kind": "typeIdentifier"
        },
        {
          "text": ") -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:SS",
          "text": "String",
          "kind": "typeIdentifier"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/joined(separator:)-5do1g",
      "abstract": [
        {
          "text": "Returns a new string by concatenating the elements of the sequence,",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "adding the given separator between each element.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/UnderlyingSequence": {
      "conformance": {
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "_IntentValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "keyword",
          "text": "typealias"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "UnderlyingSequence"
        }
      ],
      "abstract": [],
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "UnderlyingSequence"
        }
      ],
      "type": "topic",
      "title": "Array.UnderlyingSequence",
      "kind": "symbol",
      "url": "/documentation/swift/array/underlyingsequence",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/UnderlyingSequence"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/randomElement()": {
      "role": "symbol",
      "kind": "symbol",
      "type": "topic",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a random element of the collection."
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/randomElement()",
      "title": "randomElement()",
      "url": "/documentation/swift/array/randomelement()",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "randomElement",
          "kind": "identifier"
        },
        {
          "text": "() -> ",
          "kind": "text"
        },
        {
          "kind": "typeIdentifier",
          "text": "Self"
        },
        {
          "kind": "text",
          "text": "."
        },
        {
          "kind": "typeIdentifier",
          "text": "Element",
          "preciseIdentifier": "s:ST7ElementQa"
        },
        {
          "kind": "text",
          "text": "?"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP": {
      "type": "topic",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "DecodableWithConfiguration",
          "kind": "identifier"
        }
      ],
      "url": "/documentation/Foundation/DecodableWithConfiguration",
      "role": "symbol",
      "title": "DecodableWithConfiguration",
      "kind": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:10Foundation26DecodableWithConfigurationP",
      "abstract": [
        {
          "text": "A protocol for types that support decoding when supplied with an additional configuration type.",
          "type": "text"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection": {
      "type": "topic",
      "fragments": [
        {
          "text": "protocol",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "kind": "identifier",
          "text": "RangeReplaceableCollection"
        }
      ],
      "role": "symbol",
      "kind": "symbol",
      "navigatorTitle": [
        {
          "kind": "identifier",
          "text": "RangeReplaceableCollection"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/RangeReplaceableCollection",
      "title": "RangeReplaceableCollection",
      "url": "/documentation/swift/rangereplaceablecollection",
      "abstract": [
        {
          "type": "text",
          "text": "A collection that supports replacement of an arbitrary subrange of elements"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "with the elements of another collection."
        }
      ],
      "conformance": {
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "Copyable"
          },
          {
            "type": "text",
            "text": " and "
          },
          {
            "type": "codeVoice",
            "code": "Escapable"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/RandomAccessCollection-Implementations": {
      "role": "collectionGroup",
      "abstract": [],
      "type": "topic",
      "title": "RandomAccessCollection Implementations",
      "kind": "article",
      "url": "/documentation/swift/array/randomaccesscollection-implementations",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/RandomAccessCollection-Implementations"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/==(_:_:)": {
      "role": "symbol",
      "type": "topic",
      "url": "/documentation/swift/array/==(_:_:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether two arrays contain the same"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "elements in the same order."
        }
      ],
      "title": "==(_:_:)",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/==(_:_:)",
      "fragments": [
        {
          "kind": "keyword",
          "text": "static"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "keyword",
          "text": "func"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "text": "==",
          "kind": "identifier"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "(",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sa",
          "text": "Array",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">, ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sa",
          "text": "Array",
          "kind": "typeIdentifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ">) -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ],
      "kind": "symbol",
      "conformance": {
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "code": "Element",
            "type": "codeVoice"
          },
          {
            "text": " conforms to ",
            "type": "text"
          },
          {
            "code": "Equatable",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      }
    },
    "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:by:)": {
      "type": "topic",
      "url": "/documentation/swift/array/elementsequal(_:by:)",
      "abstract": [
        {
          "type": "text",
          "text": "Returns a Boolean value indicating whether this sequence and another"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "sequence contain equivalent elements in the same order, using the given"
        },
        {
          "type": "text",
          "text": " "
        },
        {
          "type": "text",
          "text": "predicate as the equivalence test."
        }
      ],
      "kind": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/elementsEqual(_:by:)",
      "title": "elementsEqual(_:by:)",
      "role": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "elementsEqual",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "by",
          "kind": "externalParam"
        },
        {
          "text": ": (",
          "kind": "text"
        },
        {
          "text": "Self",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ", ",
          "kind": "text"
        },
        {
          "text": "OtherSequence",
          "kind": "typeIdentifier"
        },
        {
          "text": ".",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:ST7ElementQa",
          "text": "Element",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "throws",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        },
        {
          "text": ") ",
          "kind": "text"
        },
        {
          "text": "rethrows",
          "kind": "keyword"
        },
        {
          "text": " -> ",
          "kind": "text"
        },
        {
          "preciseIdentifier": "s:Sb",
          "text": "Bool",
          "kind": "typeIdentifier"
        }
      ]
    },
    "doc://com.externally.resolved.symbol/s:16FoundationModels19PromptRepresentableP": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "protocol"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "PromptRepresentable"
        }
      ],
      "kind": "symbol",
      "url": "/documentation/FoundationModels/PromptRepresentable",
      "type": "topic",
      "role": "symbol",
      "identifier": "doc://com.externally.resolved.symbol/s:16FoundationModels19PromptRepresentableP",
      "abstract": [
        {
          "type": "text",
          "text": "A protocol that represents a prompt."
        }
      ],
      "title": "PromptRepresentable",
      "beta": true
    },
    "doc://com.apple.Swift/documentation/Swift/ContiguousArray": {
      "identifier": "doc://com.apple.Swift/documentation/Swift/ContiguousArray",
      "type": "topic",
      "kind": "symbol",
      "role": "symbol",
      "title": "ContiguousArray",
      "url": "/documentation/swift/contiguousarray",
      "abstract": [
        {
          "text": "A contiguously stored array.",
          "type": "text"
        }
      ],
      "navigatorTitle": [
        {
          "text": "ContiguousArray",
          "kind": "identifier"
        }
      ],
      "fragments": [
        {
          "kind": "keyword",
          "text": "struct"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "ContiguousArray",
          "kind": "identifier"
        }
      ]
    },
    "doc://com.apple.Swift/documentation/Swift/Array/reverse()": {
      "url": "/documentation/swift/array/reverse()",
      "title": "reverse()",
      "conformance": {
        "constraints": [
          {
            "code": "Self",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "code": "BidirectionalCollection",
            "type": "codeVoice"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/reverse()",
      "abstract": [
        {
          "text": "Reverses the elements of the collection in place.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "reverse",
          "kind": "identifier"
        },
        {
          "text": "()",
          "kind": "text"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/count": {
      "fragments": [
        {
          "kind": "keyword",
          "text": "var"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "identifier",
          "text": "count"
        },
        {
          "kind": "text",
          "text": ": "
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:Si",
          "text": "Int"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "The number of elements in the array."
        }
      ],
      "type": "topic",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/count",
      "kind": "symbol",
      "title": "count",
      "url": "/documentation/swift/array/count",
      "role": "symbol"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init()": {
      "abstract": [
        {
          "text": "Creates a new, empty array.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "role": "symbol",
      "title": "init()",
      "url": "/documentation/swift/array/init()",
      "fragments": [
        {
          "text": "init",
          "kind": "identifier"
        },
        {
          "text": "()",
          "kind": "text"
        }
      ],
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init()",
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/shuffle(using:)": {
      "url": "/documentation/swift/array/shuffle(using:)",
      "title": "shuffle(using:)",
      "conformance": {
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Self"
          },
          {
            "type": "text",
            "text": " conforms to "
          },
          {
            "type": "codeVoice",
            "code": "RandomAccessCollection"
          },
          {
            "type": "text",
            "text": "."
          }
        ],
        "availabilityPrefix": [
          {
            "type": "text",
            "text": "Available when"
          }
        ],
        "conformancePrefix": [
          {
            "type": "text",
            "text": "Conforms when"
          }
        ]
      },
      "role": "symbol",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/shuffle(using:)",
      "abstract": [
        {
          "text": "Shuffles the collection in place, using the given generator as a source",
          "type": "text"
        },
        {
          "text": " ",
          "type": "text"
        },
        {
          "text": "for randomness.",
          "type": "text"
        }
      ],
      "kind": "symbol",
      "fragments": [
        {
          "text": "func",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "shuffle",
          "kind": "identifier"
        },
        {
          "text": "<",
          "kind": "text"
        },
        {
          "text": "T",
          "kind": "genericParameter"
        },
        {
          "text": ">(",
          "kind": "text"
        },
        {
          "text": "using",
          "kind": "externalParam"
        },
        {
          "text": ": ",
          "kind": "text"
        },
        {
          "text": "inout",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "text"
        },
        {
          "text": "T",
          "kind": "typeIdentifier"
        },
        {
          "text": ")",
          "kind": "text"
        }
      ],
      "type": "topic"
    },
    "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-86ka8": {
      "conformance": {
        "conformancePrefix": [
          {
            "text": "Conforms when",
            "type": "text"
          }
        ],
        "availabilityPrefix": [
          {
            "text": "Available when",
            "type": "text"
          }
        ],
        "constraints": [
          {
            "type": "codeVoice",
            "code": "Element"
          },
          {
            "text": " is ",
            "type": "text"
          },
          {
            "code": "MLDataValue",
            "type": "codeVoice"
          },
          {
            "text": ".",
            "type": "text"
          }
        ]
      },
      "role": "symbol",
      "fragments": [
        {
          "kind": "identifier",
          "text": "init"
        },
        {
          "kind": "text",
          "text": "("
        },
        {
          "kind": "typeIdentifier",
          "preciseIdentifier": "s:8CreateML15MLUntypedColumnV",
          "text": "MLUntypedColumn"
        },
        {
          "kind": "text",
          "text": ")"
        }
      ],
      "abstract": [
        {
          "type": "text",
          "text": "Constructs an Array with the elements of an MLUntypedColumn."
        }
      ],
      "type": "topic",
      "title": "init(_:)",
      "kind": "symbol",
      "url": "/documentation/swift/array/init(_:)-86ka8",
      "identifier": "doc://com.apple.Swift/documentation/Swift/Array/init(_:)-86ka8"
    }
  },
  "variantOverrides": [
    {
      "traits": [
        {
          "interfaceLanguage": "occ"
        }
      ],
      "patch": [
        {
          "value": [
            {
              "text": "@interface",
              "kind": "keyword"
            },
            {
              "text": " ",
              "kind": "text"
            },
            {
              "text": "NSArray",
              "kind": "identifier"
            },
            {
              "text": " : ",
              "kind": "text"
            },
            {
              "text": "NSObject",
              "kind": "typeIdentifier",
              "preciseIdentifier": "c:objc(cs)NSObject"
            }
          ],
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Foundation~1NSArray/fragments",
          "op": "replace"
        },
        {
          "value": [
            {
              "kind": "keyword",
              "text": "@interface"
            },
            {
              "text": " ",
              "kind": "text"
            },
            {
              "text": "NSMutableArray",
              "kind": "identifier"
            },
            {
              "text": " : ",
              "kind": "text"
            },
            {
              "text": "NSArray",
              "preciseIdentifier": "c:objc(cs)NSArray",
              "kind": "typeIdentifier"
            }
          ],
          "path": "/references/doc:~1~1com.apple.documentation~1documentation~1Foundation~1NSMutableArray/fragments",
          "op": "replace"
        }
      ]
    }
  ],
  "legalNotices": {
    "copyright": "Copyright &copy; 2025 Apple Inc. All rights reserved.",
    "termsOfUse": "https://www.apple.com/legal/internet-services/terms/site.html",
    "privacyPolicy": "https://www.apple.com/privacy/privacy-policy"
  }
}
